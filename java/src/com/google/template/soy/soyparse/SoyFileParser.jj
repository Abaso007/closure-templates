/*
 * Copyright 2008 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// JavaCC grammar specification for a Soy file.
//
// @author Kai Huang


// =================================================================================================
// Options
// =================================================================================================

options {
  JDK_VERSION = "1.7";
  STATIC = false;
  UNICODE_INPUT = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;

  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}


// =================================================================================================
// Parser class
// =================================================================================================


PARSER_BEGIN(SoyFileParser)

package com.google.template.soy.soyparse;

import static com.google.template.soy.exprtree.Operator.createOperatorNode;

import com.google.common.base.CharMatcher;
import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicates;
import com.google.common.collect.FluentIterable;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.primitives.Ints;
import com.google.common.primitives.Longs;
import com.google.template.soy.base.SourceLocation;
import com.google.template.soy.base.internal.BaseUtils;
import com.google.template.soy.base.internal.Identifier;
import com.google.template.soy.base.internal.IdGenerator;
import com.google.template.soy.base.internal.LegacyInternalSyntaxException;
import com.google.template.soy.base.internal.SoyFileKind;
import com.google.template.soy.data.SanitizedContent.ContentKind;
import com.google.template.soy.error.ErrorReporter.Checkpoint;
import com.google.template.soy.error.ErrorReporter;
import com.google.template.soy.error.SoyErrorKind;
import com.google.template.soy.exprparse.SoyParsingContext;
import com.google.template.soy.exprtree.BooleanNode;
import com.google.template.soy.exprtree.ExprNode;
import com.google.template.soy.exprtree.ExprNode.PrimitiveNode;
import com.google.template.soy.exprtree.FieldAccessNode;
import com.google.template.soy.exprtree.FloatNode;
import com.google.template.soy.exprtree.FunctionNode;
import com.google.template.soy.exprtree.GlobalNode;
import com.google.template.soy.exprtree.IntegerNode;
import com.google.template.soy.exprtree.ItemAccessNode;
import com.google.template.soy.exprtree.ListLiteralNode;
import com.google.template.soy.exprtree.MapLiteralNode;
import com.google.template.soy.exprtree.NullNode;
import com.google.template.soy.exprtree.Operator;
import com.google.template.soy.exprtree.OperatorNodes.NegativeOpNode;
import com.google.template.soy.exprtree.ProtoInitNode;
import com.google.template.soy.exprtree.StringNode;
import com.google.template.soy.exprtree.VarRefNode;
import com.google.template.soy.internal.base.UnescapeUtils;
import com.google.template.soy.soytree.defn.HeaderParam;
import com.google.template.soy.soytree.AliasDeclaration;
import com.google.template.soy.soytree.CallBasicNode;
import com.google.template.soy.soytree.CallDelegateNode;
import com.google.template.soy.soytree.CallNode;
import com.google.template.soy.soytree.CallParamContentNode;
import com.google.template.soy.soytree.CallParamNode;
import com.google.template.soy.soytree.CallParamValueNode;
import com.google.template.soy.soytree.CommandTagAttribute;
import com.google.template.soy.soytree.CssNode;
import com.google.template.soy.soytree.DebuggerNode;
import com.google.template.soy.soytree.ForNode;
import com.google.template.soy.soytree.ForeachIfemptyNode;
import com.google.template.soy.soytree.ForeachNode;
import com.google.template.soy.soytree.ForeachNonemptyNode;
import com.google.template.soy.soytree.IfCondNode;
import com.google.template.soy.soytree.IfElseNode;
import com.google.template.soy.soytree.IfNode;
import com.google.template.soy.soytree.LetContentNode;
import com.google.template.soy.soytree.LetNode;
import com.google.template.soy.soytree.LetValueNode;
import com.google.template.soy.soytree.LogNode;
import com.google.template.soy.soytree.MsgFallbackGroupNode;
import com.google.template.soy.soytree.MsgHtmlTagNode;
import com.google.template.soy.soytree.MsgNode;
import com.google.template.soy.soytree.MsgPlaceholderNode;
import com.google.template.soy.soytree.MsgPluralCaseNode;
import com.google.template.soy.soytree.MsgPluralDefaultNode;
import com.google.template.soy.soytree.MsgPluralNode;
import com.google.template.soy.soytree.MsgSelectCaseNode;
import com.google.template.soy.soytree.MsgSelectDefaultNode;
import com.google.template.soy.soytree.MsgSelectNode;
import com.google.template.soy.soytree.NamespaceDeclaration;
import com.google.template.soy.soytree.PrintDirectiveNode;
import com.google.template.soy.soytree.PrintNode;
import com.google.template.soy.soytree.RawTextNode;
import com.google.template.soy.soytree.SoyFileNode;
import com.google.template.soy.soytree.SoyNode.MsgPlaceholderInitialNode;
import com.google.template.soy.soytree.SoyNode.StandaloneNode;
import com.google.template.soy.soytree.SoyNode.StatementNode;
import com.google.template.soy.soytree.SwitchCaseNode;
import com.google.template.soy.soytree.SwitchDefaultNode;
import com.google.template.soy.soytree.SwitchNode;
import com.google.template.soy.soytree.TemplateBasicNodeBuilder;
import com.google.template.soy.soytree.TemplateDelegateNodeBuilder;
import com.google.template.soy.soytree.TemplateNode.SoyFileHeaderInfo;
import com.google.template.soy.soytree.TemplateNode;
import com.google.template.soy.soytree.TemplateNodeBuilder;
import com.google.template.soy.soytree.XidNode;
import com.google.template.soy.types.SoyType;
import com.google.template.soy.types.SoyTypes;
import com.google.template.soy.types.ast.GenericTypeNode;
import com.google.template.soy.types.ast.NamedTypeNode;
import com.google.template.soy.types.ast.RecordTypeNode;
import com.google.template.soy.types.ast.TypeNode;
import com.google.template.soy.types.ast.UnionTypeNode;
import com.google.template.soy.types.SoyTypeRegistry;
import com.google.template.soy.types.primitive.ErrorType;
import com.google.template.soy.types.primitive.UnknownType;
import com.google.template.soy.types.primitive.NullType;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.regex.Pattern;
import javax.annotation.Nullable;

/**
 * This parser's specification is in SoyFileParser.jj, which is read by JavaCC and transformed
 * into SoyFileParser.java. To modify this parser, please edit SoyFileParser.jj. Do not edit
 * SoyFileParser.java directly.
 *
 * <p> Important: Do not use outside of Soy code (treat as superpackage-private).
 *
 * <pre>
 * This parser parses the following Soy file structure:
 *
 * 1. Delegate package (delpackage):
 *    + Optional.
 *    + The file must contain 0 or 1 delpackage declaration.
 *    + It must appear before the namespace declaration.
 *    + It must appear on its own line and start at the start of a line.
 *    Example:  {delpackage MySecretFeature}
 *
 * 2. Namespace:
 *    + The file must contain exactly one namespace declaration.
 *    + It must appear before any templates.
 *    + It must appear on its own line and start at the start of a line.
 *    Examples:
 *    {namespace boo.foo}
 *    {namespace boo.foo autoescape="..."}
 *
 * 3. Alias:
 *    + Alias declarations must appear after the namespace declaration.
 *    + They must appear before any templates.
 *    + Each must appear on its own line and start at the start of a line.
 *    Examples:
 *    {alias boo.foo.goo.moo}
 *    {alias boo.foo.goo.moo as zoo}
 *
 * 4. SoyDoc:
 *    + Starts with slash-star-star (/**) and ends with star-slash (*&#47;) like JavaDoc.
 *    + SoyDoc must appear on its own line(s) and start at the start of a line.
 *    + Currently recognizes two tags: "&#64;param keyName" and "&#64;param? optionalKeyName".
 *    Example:
 *    /**
 *     * &#64;param boo Something scary.
 *     * &#64;param? goo Something slimy (optional).
 *     *&#47;
 *
 * 5. Template:
 *    + Each template must be immediately preceded by a SoyDoc block.
 *    + The 'template' tag and the '/template' tag much each appear on its own line(s) and start
 *      at the start of a line.
 *    + The template content is parsed by TemplateParser.jj.
 *    Examples:
 *    /**
 *     * New style.
 *     * &#64;param boo Something scary.
 *     * &#64;param? goo Something slimy (optional).
 *     *&#47;
 *    {template .foo autoescape="..."}
 *      {msg desc=""}
 *        {$boo} has a friend named {$goo.firstName}.
 *      {/msg}
 *    {/template}
 *
 * 6. Misc:
 *    + Other than the items specified above, everything else is ignored.
 *    + SoyDoc blocks not immediately followed by a template are ignored.
 *    + The file must end with a newline.
 *
 * Template contents are parsed as follows:
 * Header:
 *
 * 1. Comments:
 *    + Comments are only allowed outside of Soy tags.
 *    + Standard "//" for a rest-of-line comment. Must appear at start of line or after a space.
 *    + Standard slash-star (/*) ... star-slash (*&#47;) for a block comment.
 *    + Doc comments are not allowed, except when attached to a valid declaration.
 *
 * 2. Param declaration:
 *    + Soy tag with command name "@param" and command text "key: type".
 *    + Optional desc string is written as a block doc comment, which either must
 *      precede the param tag, or must start on the same line as the end of the '@param' tag.
 *    + Examples:
 *    {@param foo: bool}
 *    {@param foo: list<int>}  /** A list of numbers. *&#47;
 *    {@param? foo:
 *        list<int>}  /**
 *        A list of numbers. *&#47;
 *
 * 3. Injected param declaration:
 *    + Works exactly like @param except that parameter values are taken from the
 *      implicit $ij scope.
 *    + Soy tag with command name "@inject" and command text "key: type".
 *    + Optional desc string is written as a block doc comment, which either must
 *      precede the param tag, or must start on the same line as the end of the '@inject' tag.
 *    + Examples:
 *    {@inject foo: bool}
 *    {@inject foo: list<int>}  /** A list of numbers. *&#47;
 *    {@inject? foo:
 *        list<int>}  /**
 *        A list of numbers. *&#47;
 *
 * Body:
 *
 * 1. Soy tag format:
 *    + Can be delimited by single braces "{...}".
 *    + } characters are only allowed in tags if they're inside string literals.
 *    + Some Soy tags are allowed to end in "/}" to denote immediate ending of a block.
 *    + It is an error to use "/}" when it's not applicable to the command.
 *    + If there is a command name, it must come immediately after the opening delimiter.
 *    + The command name must be followed by either the closing delimiter (if the command does not
 *      take any command text) or a whitespace (if the command takes command text).
 *    + It is an error to provide command text when it's not applicable, and vice versa.
 *    + This parser does not parse command text (that will be separate).
 *    Examples:
 *    {print $boo}   // explicit 'print' command
 *    {$boo.foo}   // implicit 'print' command
 *    {printer}   // implicit 'print' command (the prefix 'print' here is not a command name)
 *    {\n}   // a command that doesn't take any command text
 *    {call .gooMoo data="all" /}   // self-ending block
 *    {call .gooMoo data="all"}...{/call}   // block with separate start and end tags
 *
 * 2. Raw text:
 *    + Raw text is fixed text that will be part of the template output. There are 3 types.
 *    + Any text outside of Soy tags is raw text.
 *    + There are 7 special character commands that produce raw text strings:
 *      {sp} = space   {nil} = empty string   {\n} = newline (line feed)   {\r} = carriage return
 *      {\t} = tab   {lb} = left brace   {rb} = right brace
 *    + A section of raw text (may contain braces) can be enclosed within a 'literal' block:
 *      {literal}...{/literal}
 *
 * 3. Msg blocks:
 *    + A block between 'msg' and '/msg' tags represents a message for translation.
 *    + It is an error to nest 'msg' blocks.
 *    + Within a 'msg' block, the parsing of Soy tags is the same. The only difference is that we
 *      also recognize "&lt;" and "&gt;" as opening and closing an HTML tag. This is because each
 *      HTML tag as a whole needs to be turned into a single placeholder in the message.
 *    + A 'msg' block may have a 'plural' or 'select' block as its only content.
 *    + A 'msg' block may be followed by optional additional 'fallbackmsg' blocks.
 *    Example:
 *    {msg desc="Event title."}
 *      Join event &lt;a href="{$event.url}"&gt;{$event.title}&lt;/a&gt;.
 *    {fallbackmsg desc="Event title."}
 *      Join event {$event.title}.
 *    {/msg}
 *
 * 4. Other Soy commands:
 *    {print ...}
 *    {...}    // implied 'print' command
 *    {xid ...}
 *    {css ...}
 *    {let ... /}
 *    {let ...}...{/let}
 *    {if ...}...{elseif ...}...{else ...}...{/if}
 *    {switch ...}{case ...}...{default}...{/switch}
 *    {foreach ...}...{ifempty}...{/foreach}
 *    {for ...}...{/for}
 *    {call ... /}
 *    {delcall ... /}
 *    {call ...}{param ... /}{param ...}...{/param}{/call}
 *    {delcall ...}{param ... /}{param ...}...{/param}{/delcall}
 *    {log}...{/log}
 *    {debugger}
 *
 * 5. Misc:
 *    + The following commands are not allowed to appear in a template:
 *      {namespace ...}   {template ...}   {/template}
 * </pre>
 *
 * <p>TODO(lukes):  This parser has a lot of issues:
 * Too much parsing logic is handled by the AST nodes with regular expressions.  This is probably
 * slower than handling it in the parser and it leads to redundant error handling code.
 *
 */
public class SoyFileParser {
  /** Regex string used in patterns below. Note the first set of spaces is reluctant. */
  private static final String LINE_BOUNDARY_REGEX = "\\s*?(\\n|\\r)\\s*";

  /** Pattern for a line boundary. */
  private static final Pattern LINE_BOUNDARY_PATTERN = Pattern.compile(LINE_BOUNDARY_REGEX);

  private static class RegexFromTokenImageFunction implements Function<String, String> {
    @Override public String apply(String o) {
      // Strip the surrounding quotes and braces.
      return Pattern.quote(o.substring(2, o.length() - 2));
    }
  };

  /** Pattern for invalid implicit print prefixes (used to throw errors for invalid commands). */
  private static final Pattern INVALID_PRINT_PREFIX_PATTERN = Pattern.compile(
      // tokenImage contains token names for error messages. For literal tokens, it stores the token
      // value as-is, wrapped in quotes. Use this to extract simple token names without duplication.
      "^(" + Joiner.on("|").join(FluentIterable.from(Arrays.asList(tokenImage))
              .filter(Predicates.containsPattern("^\"\\{[a-z]+\\}\"$"))
              .transform(new RegexFromTokenImageFunction()))
      + ")\\b.+");

  /** Pattern for invalid implicit print prefixes (used to throw errors for invalid commands). */
  private static final Pattern INVALID_PRINT_FILE_PREFIX_PATTERN = Pattern.compile(
      "^(namespace|(del)?template|typedef|alias)\\b.*");

  private static final Joiner NO_SEP_JOINER = Joiner.on("");

  // Template errors:
  private static final SoyErrorKind FOUND_DOUBLE_BRACE =
      SoyErrorKind.of("Soy '{{command}}' syntax is no longer supported.  Use single braces.");
  private static final SoyErrorKind INVALID_ALIAS_NAME =
      SoyErrorKind.of("An alias must be a single identifier. Found ''{0}''.");
  private static final SoyErrorKind INVALID_DECLARATION =
      SoyErrorKind.of("Invalid declaration ''{0}''.");
  private static final SoyErrorKind INVALID_DELTEMPLATE_NAME =
      SoyErrorKind.of("Deltemplate ''{0}'' must have a fully qualified name.");
  private static final SoyErrorKind INVALID_PRINT_PREFIX =
      SoyErrorKind.of("Command ''{0}'' cannot have arguments.");
  private static final SoyErrorKind INVALID_PRINT_COMMAND_TEXT =
      SoyErrorKind.of("Invalid ''print'' command text \"{0}\" (check the directives).");
  private static final SoyErrorKind INVALID_RANGE_SPECIFICATION =
      SoyErrorKind.of("Invalid range specification");
  private static final SoyErrorKind INVALID_TEMPLATE_COMMAND =
      SoyErrorKind.of("Command ''{0}'' cannot appear in templates.");
  private static final SoyErrorKind INVALID_TEMPLATE_NAME =
      SoyErrorKind.of("Template name ''{0}'' must be relative to the file namespace, i.e. a dot "
          + "followed by an identifier.");
  private static final SoyErrorKind MULTIPLE_PHNAME_ATTRIBUTES_IN_COMMAND =
      SoyErrorKind.of("Found multiple ''phname'' attributes in command text \"{0}\".");
  private static final SoyErrorKind PARSER_ERROR =
      SoyErrorKind.of("parse error at ''{0}'': expected {1}");
  private static final SoyErrorKind PLURAL_AND_SELECT_NOT_ALLOWED_INSIDE_PLURAL_BLOCK =
      SoyErrorKind.of("Tags ''plural'' and ''select'' are not allowed inside ''plural'' blocks.");
  private static final SoyErrorKind PLURAL_CASE_OUT_OF_BOUNDS =
      SoyErrorKind.of("Plural case ''{0}'' must be a nonnegative integer.");
  private static final SoyErrorKind PLURAL_CASE_MALFORMED =
      SoyErrorKind.of("Invalid number in ''plural case'' command text.");
  private static final SoyErrorKind PLURAL_OFFSET_OUT_OF_BOUNDS =
      SoyErrorKind.of("The ''offset'' for plural (''{0}'') must be a positive integer.");
  private static final SoyErrorKind PRINT_COMMAND_WITH_EMPTY_TEXT =
      SoyErrorKind.of("Found ''print'' command with empty command text.");
  private static final SoyErrorKind SELECT_CASE_INVALID_VALUE =
      SoyErrorKind.of("Invalid value for select ''case'', "
          + "expected ''female'', ''male'', or ''other''.");
  private static final SoyErrorKind UNEXPECTED_CLOSING_TAG =
      SoyErrorKind.of("Unexpected closing tag ''{0}''.");
  private static final SoyErrorKind UNEXPECTED_CONTENT_AFTER =
      SoyErrorKind.of("Unexpected content after ''{0}'', expected only comments or whitespace.");
  private static final SoyErrorKind UNEXPECTED_CONTENT_BEFORE =
      SoyErrorKind.of("Unexpected content before ''{0}'', expected only comments or whitespace.");


  private static final SoyErrorKind DUPLICATE_PARAM_NAME =
      SoyErrorKind.of("Duplicate param name ''{0}''");
  private static final SoyErrorKind INTEGER_OUT_OF_RANGE =
      SoyErrorKind.of("Soy integers are constrained to the range of JavaScript integers: "
          + "https://www.ecma-international.org/ecma-262/5.1/#sec-8.5");
  private static final SoyErrorKind INVALID_FUNCTION_NAME =
      SoyErrorKind.of("Invalid function name ''{0}''");
  private static final SoyErrorKind INVALID_PARAM_NAME =
      SoyErrorKind.of("Invalid param name ''{0}''");
  private static final SoyErrorKind INVALID_VAR_NAME_IJ =
      SoyErrorKind.of("Invalid var name ''ij'' (''ij'' is for injected data ref).");
  private static final SoyErrorKind SINGLE_IDENTIFIER_KEY_IN_MAP_LITERAL =
      SoyErrorKind.of("Disallowed single-identifier key \"{0}\" in map literal "
          + "(please surround with single quotes for string or parentheses for global).");


  /** Type registry for resolving type names. */
  private SoyTypeRegistry typeRegistry;

  /** Node id generator for the tree being built. */
  private IdGenerator nodeIdGen;

  /** The kind of this Soy file. */
  private SoyFileKind soyFileKind;

  /** Path of source being parsed. This is descriptive, not a means to refetch source. */
  private String filePath;

  /** For reporting errors during parsing. */
  private ErrorReporter errorReporter;

  /** Can only be used in templates. */
  private SoyParsingContext context;

  /**
   * Constructor that takes a reader object providing the input.
   *
   * @param typeRegistry The type registry for resolving type names.
   * @param nodeIdGen The node id generator for the tree being built.
   * @param input The input to parse.
   * @param soyFileKind The kind of this Soy file.
   * @param filePath The path of the source being parsed. Used for reporting.
   * @param errorReporter For reporting parse errors.
   */
  public SoyFileParser(
      SoyTypeRegistry typeRegistry,
      IdGenerator nodeIdGen,
      Reader input,
      SoyFileKind soyFileKind,
      String filePath,
      ErrorReporter errorReporter) {
    this(input);
    Preconditions.checkNotNull(typeRegistry);
    Preconditions.checkNotNull(nodeIdGen);
    this.typeRegistry = typeRegistry;
    this.nodeIdGen = nodeIdGen;
    this.soyFileKind = soyFileKind;
    this.filePath = filePath;
    this.errorReporter = errorReporter;
  }

  /**
   * Attempts to parse the given input as a Soy file, returns null if parsing fails.
   */
  @Nullable
  public SoyFileNode parseSoyFile() {
    Preconditions.checkNotNull(typeRegistry);
    Preconditions.checkNotNull(nodeIdGen);
    Checkpoint checkpoint = errorReporter.checkpoint();
    SoyFileNode soyFileNode = null;
    try {
      soyFileNode = SoyFile();
    } catch (ParseException e) {
      ParseErrors.reportSoyFileParseException(errorReporter, filePath, e);
    } catch (LegacyInternalSyntaxException e) {
      ParseErrors.report(errorReporter, filePath, e);
    } catch (TokenMgrError e) {
      ParseErrors.reportTokenMgrError(errorReporter, filePath, e);
    }

    // our callers expect us to return null when encountering parsing errors.
    if (errorReporter.errorsSince(checkpoint)) {
      return null;
    }
    return soyFileNode;
  }

  /**
   * Reports the error and skips to the given token.
   *
   * See https://javacc.org/tutorials/errorrecovery
   */
  private Token reportFileErrorAndSkipTo(ParseException error, int skipTo) {
    ParseErrors.reportSoyFileParseException(errorReporter, filePath, error);
    Token t;
    do {
      t = getNextToken();
    // We need to halt when observing EOF.  The behavior of the token manager is to keep returning
    // EOF from getNextToken(), so if we don't check for it this will become an infinite loop.
    } while (t.kind != skipTo && t.kind != EOF);
    return t;
  }

  /**
   * Reports the error and skips to the given token if it observes the end of a template, throws an
   * exception to halt parsing.
   *
   * See https://javacc.org/tutorials/errorrecovery
   */
  private Token reportTemplateBodyErrorAndSkipTo(ParseException error, int... skipTo) {
    ParseErrors.reportSoyFileParseException(errorReporter, filePath, error);

    ImmutableSet<Integer> skipToKinds = ImmutableSet.copyOf(Ints.asList(skipTo));
    Token t;
    do {
      t = getNextToken();
      if (t.kind == CMD_CLOSE_TEMPLATE || t.kind == CMD_CLOSE_DELTEMPLATE) {
        throw new AbortParsingError();
      }
    // We need to halt when observing EOF.  The behavior of the token manager is to keep returning
    // EOF from getNextToken(), so if we don't check for it this will become an infinite loop.
    } while (!skipToKinds.contains(t.kind) && t.kind != EOF);
    return t;
  }

  private Token skipTo(int skipTo) {
    Token t;
    do {
      t = getNextToken();
    // We need to halt when observing EOF.  The behavior of the token manager is to keep returning
    // EOF from getNextToken(), so if we don't check for it this will become an infinite loop.
    } while (t.kind != skipTo && t.kind != EOF);
    return t;
  }

  private <T> SourceItemInfo<T> newSourceItemInfo(T parsed, Token token) {
    return newSourceItemInfo(
        parsed, token.beginLine, token.beginColumn, token.endLine, token.endColumn);
  }

  private <T> SourceItemInfo<T> newSourceItemInfo(T parsed, Token begin, Token end) {
    return newSourceItemInfo(
        parsed, begin.beginLine, begin.beginColumn, end.endLine, end.endColumn);
  }

  private <T> SourceItemInfo<T> newSourceItemInfo(T parsed, SourceItemInfo<?> begin,
      SourceItemInfo<?> end) {
    return new SourceItemInfo<T>(parsed, begin, end);
  }

  private <T> SourceItemInfo<T> newSourceItemInfo(
      T parsed, int lineNum, int columnNum, int lineNumEnd, int columnNumEnd) {
    return new SourceItemInfo<T>(filePath, parsed,
        lineNum, columnNum,
        lineNumEnd, columnNumEnd);
  }

  private <T> SourceItemInfo<T> newSourceItemInfo(
      T parsed, SourceLocation location) {
    return new SourceItemInfo<T>(parsed, location);
  }

  private <T> SourceItemInfo<T> newSourceItemInfo(
      T parsed, SourceLocation begin, SourceLocation end) {
    return new SourceItemInfo<T>(parsed, begin.extend(end));
  }

  /** Create a SourceLocation spanning all given tokens. */
  private SourceLocation createSrcLoc(Token tok1, Token... rest) {
    return Tokens.createSrcLoc(filePath, tok1, rest);
  }

  /** Create an error ExprNode at the location of the given tokens. */
  private VarRefNode errorExpr(Token tok1, Token... rest) {
    return VarRefNode.error(createSrcLoc(tok1, rest));
  }

  /** Create an error ExprNode at the given source location. */
  private VarRefNode errorExpr(SourceLocation location) {
    return VarRefNode.error(location);
  }

  // Methods for managing lexical states from the parser
  // Be careful using these.  You should only use them at fixed points where you know.
  // * The lexer is only one token ahead (and you generally know the exact token)
  // * The state change isn't possible to perform from the lexer directly. For example, because it
  //   depends on a 'syntactic element' such as a tag attribute (e.g. kind="html")
  // * There is a clear matching syntactic element for exiting the state (e.g. a close tag)


  /** Switch the parser to a new state and push the current state onto the stack. */
  private void pushState(int nextState) {
    Tokens.checkLexerIsExactlyOneTokenAhead(this);
    token_source.pushState(nextState);
  }

  /** pop the stack and switch to that state. */
  private void popState() {
    Tokens.checkLexerIsExactlyOneTokenAhead(this);
    token_source.popState();
  }

  private void popStateIfStateIs(int state) {
    Tokens.checkLexerIsExactlyOneTokenAhead(this);
    token_source.popStateIfStateIs(state);
  }

  // An error that can be thrown to abort parsing.  This is useful if an error has been reported
  // and it is known that parsing cannot continue.
  private static final class AbortParsingError extends Error {}
}

PARSER_END(SoyFileParser)


// =================================================================================================
// Token manager
// =================================================================================================


TOKEN_MGR_DECLS: {
  // Template parser:

  // Used for returning to our prior lexical state when completing a multiline comment.
  private final LexicalStateStack stateStack = new LexicalStateStack();


  /** Saves the current lexical state and switch to a new one.  To switch back call
   * {@link #popState()}.
   */
  void pushState(int newState) {
    stateStack.push(curLexState);
    SwitchTo(newState);
  }

  /**
   * Switch back to the previous state stored in {@link #stateStack}.
   */
  void popState() {
    SwitchTo(stateStack.pop());
  }

  /**
   * Conditionally pops the given state if it is at the top of the stack and the stack isn't empty.
   *
   * <p>Most users should use {@link #popState()} but in error conditions this can be useful to
   * prevent underflowing the stack.
   */
  void popStateIfStateIs(int state) {
    if (stateStack.peek() == state) {
      popState();
    }
  }

  private void clearAndSwitchToDefault() {
    stateStack.clear();
    SwitchTo(DEFAULT);
  }
}


// Tips on writing a good lexer
// https://javacc.java.net/doc/lexertips.html


// =================================================================================================
// File (non-template) tokens
// =================================================================================================


// -------------------------------------------------------------------------------------------------
// Whitespace and comments.

<DEFAULT, IN_CMD_TAG_STRUCTURED, EXPR, TYPE_EXPR> SKIP: {
  < <WS> >
| < <LINE_COMMENT> >
}

// Due to ambiguity with uri schemes, line comments in TEMPLATE_DEFAULT and
// TEMPLATE_DEFAULT_IN_MSG_BLOCK are only interpreted as such if there is preceding whitespace.
// Other lexical states don't have this requirement.  The fact that comments swallow a leading
// whitespace character doesn't affect output because of how line joining works.
<TEMPLATE_DEFAULT, TEMPLATE_DEFAULT_IN_MSG_BLOCK> SKIP: {
  < <WS> <LINE_COMMENT> >
}

// NOTE: we don't just configure this for state * because these comments shouldn't work in things
// like string literals or attribute values
<DEFAULT, TEMPLATE_DEFAULT, TEMPLATE_DEFAULT_IN_MSG_BLOCK, IN_CMD_TAG_STRUCTURED,
    EXPR, TYPE_EXPR> SKIP: {
  < "/*" > { pushState(IN_MULTILINE_COMMENT); }
}

<IN_MULTILINE_COMMENT> SKIP: {
  < ~[] >
}

<IN_MULTILINE_COMMENT> SKIP: {
  < "*/" > { popState(); }
}


// -------------------------------------------------------------------------------------------------
// Soydoc.

// Capture all soydoc into a SPECIAL_TOKEN.
// SPECIAL_TOKEN (http://www.engr.mun.ca/~theo/JavaCC-FAQ/javacc-faq-moz.htm#tth_sEc3.10)
// is a special javacc mechanism whereby we can create a 'token' that isn't directly passed to the
// parser. Normally, the stream of text gets turned into a stream of 'tokens' that then get matched
// by the parser.  A SPECIAL_TOKEN is just like a normal token, except it is not directly passed to
// the parser.  Instead, SPECIAL_TOKENs can be accessed via the normal tokens that immediately
// follow them via the Token.specialToken field.
// This behavior is useful for matching SoyDoc since we are really only interested in soydoc that
// immediately precedes template definitions.  We could theoretically handle this by creating non
// terminal for matching soydoc and then writing a BNF expression for it.  However, then we would
// have to write BNF expressions to match (and ignore) soydoc in all other contexts, which would be
// tedious.

// NOTE: we don't use all the same states as normal multiline comments (see above), this is because
// the distinction between 'doc comments' and 'multiline comments' is only relevant in these states.
<DEFAULT, TEMPLATE_DEFAULT, TEMPLATE_DEFAULT_IN_MSG_BLOCK> MORE: {
  "/**" { pushState(IN_SOYDOC); }
}

<IN_SOYDOC> MORE: {
  < ~[] >
}

<IN_SOYDOC> SPECIAL_TOKEN: {
  <SOYDOC: "*/" > { popState(); }
}


// -------------------------------------------------------------------------------------------------
// File header declarations.

<DEFAULT> TOKEN: {
  < ALIAS_OPEN: "{alias" > { pushState(EXPR); }
| < NAMESPACE_OPEN: "{namespace" > { pushState(IN_CMD_TAG_STRUCTURED); }
| < DELPACKAGE_OPEN: "{delpackage" > { pushState(IN_CMD_TAG_STRUCTURED); }
}

<IN_CMD_TAG_STRUCTURED> MORE: {
  "\"" : IN_ATTRIBUTE_VALUE
}

<IN_ATTRIBUTE_VALUE> TOKEN: {
  <ATTRIBUTE_VALUE: "\""> : IN_CMD_TAG_STRUCTURED
}

// In attribute values accumulate all non-double quote characters unless they are escaped.  N.B.
// This includes newlines which is important for backwards compatibility.
<IN_ATTRIBUTE_VALUE> MORE: {
  <~[]>
| "\\\""
}


// -------------------------------------------------------------------------------------------------
// Templates.

<DEFAULT> TOKEN: {
  < DELTEMPLATE_OPEN : "{deltemplate" > { pushState(IN_CMD_TAG_STRUCTURED); }
| < TEMPLATE_OPEN: "{template" > { pushState(IN_CMD_TAG_STRUCTURED); }
}


// =================================================================================================
// Template tokens (only used inside templates)
// =================================================================================================


// -------------------------------------------------------------------------------------------------
// Soy commands.

// ------------ Step 1: Match an opening tag (or full self-closing tag) ------------
// Prefixes:
//  - FULL for self-closing tags (return to default state after token, with no context for tag)
//  - OPEN for complete opening tags (switch to content or default state, but expect closing tag)
//  - BEGIN for incomplete opening tags (switch to IN_CMD_TAG to expect command parameters)
//  - CLOSE for closing tags (return to default state)
// OPEN tags must include trailing whitespace, to prevent them from matching implicit print commands
// which begin with the same characters (eg, `{format(blah)}`).

// IN_CMD_TAG_STRUCTURED is used for commands that parse their command text in the tokenizer. It has
// tokens for each valid construct that can appear in these tags.
//
// In the long run, all commands should have structured parsing, for now it is only {@param} and
// {@inject}
//
// IN_CMD_TAG_UNSTRUCTURED is for older or more-complex tags that are parsed through regexes, or the
// expression parser.  It swallows any kind of token into CMD_TEXT_ARBITRARY_TOKEN.

<TEMPLATE_DEFAULT, TEMPLATE_DEFAULT_IN_MSG_BLOCK> TOKEN: {
  < CMD_CLOSE_TEMPLATE           : "{/template}"    > { clearAndSwitchToDefault(); }
| < CMD_CLOSE_DELTEMPLATE        : "{/deltemplate}" > { clearAndSwitchToDefault(); }

| < DECL_BEGIN_PARAM             : "{@param"        > { pushState(IN_CMD_TAG_STRUCTURED); }
| < DECL_BEGIN_OPT_PARAM         : "{@param?"       > { pushState(IN_CMD_TAG_STRUCTURED); }
| < DECL_BEGIN_INJECT_PARAM      : "{@inject"       > { pushState(IN_CMD_TAG_STRUCTURED); }
| < DECL_BEGIN_OPT_INJECT_PARAM  : "{@inject?"      > { pushState(IN_CMD_TAG_STRUCTURED); }

| < XXX_BRACE_INVALID            : "}"              >  // catch and die on an unexpected right brace
| < CMD_FULL_SP                  : "{sp}"           >
| < CMD_FULL_NIL                 : "{nil}"          >
| < CMD_FULL_LF                  : "{\\n}"          >
| < CMD_FULL_CR                  : "{\\r}"          >
| < CMD_FULL_TAB                 : "{\\t}"          >
| < CMD_FULL_LB                  : "{lb}"           >
| < CMD_FULL_RB                  : "{rb}"           >

| < CMD_OPEN_LITERAL             : "{literal}"      > { pushState(IN_LITERAL_BLOCK); }

| < CMD_BEGIN_CALL               : "{call" <WS>     > { pushState(IN_CMD_TAG_UNSTRUCTURED); }
| < CMD_BEGIN_DELCALL            : "{delcall" <WS>  > { pushState(IN_CMD_TAG_UNSTRUCTURED); }
| < CMD_CLOSE_CALL               : "{/call}"        >
| < CMD_CLOSE_DELCALL            : "{/delcall}"     >

| < CMD_BEGIN_PARAM              : "{param" <WS>    > { pushState(IN_CMD_TAG_UNSTRUCTURED); }
| < CMD_CLOSE_PARAM              : "{/param}"       >

| < CMD_BEGIN_MSG                : "{msg" <WS>      > { pushState(IN_CMD_TAG_UNSTRUCTURED); }
| < CMD_BEGIN_FALLBACK_MSG       : "{fallbackmsg" <WS> > { pushState(IN_CMD_TAG_UNSTRUCTURED); }
| < CMD_CLOSE_MSG                : "{/msg}"         >

| < CMD_BEGIN_PRINT              : "{print" <WS>    > { pushState(IN_CMD_TAG_UNSTRUCTURED); }
| < CMD_BEGIN_XID                : "{xid" <WS>      > { pushState(IN_CMD_TAG_STRUCTURED); }
| < CMD_BEGIN_CSS                : "{css" <WS>      > { pushState(IN_CMD_TAG_UNSTRUCTURED); }

| < CMD_BEGIN_IF                 : "{if" <WS>       > { pushState(EXPR); }
| < CMD_BEGIN_ELSEIF             : "{elseif" <WS>   > { pushState(EXPR); }
| < CMD_FULL_ELSE                : "{else}"         >
| < CMD_CLOSE_IF                 : "{/if}"          >

| < CMD_BEGIN_LET                : "{let" <WS>      > { pushState(EXPR); }
| < CMD_CLOSE_LET                : "{/let}"         >

| < CMD_BEGIN_FOR                : "{for" <WS>      > { pushState(EXPR); }
| < CMD_CLOSE_FOR                : "{/for}"         >

| < CMD_BEGIN_PLURAL             : "{plural" <WS>   > { pushState(EXPR); }
| < CMD_CLOSE_PLURAL             : "{/plural}"      >

| < CMD_BEGIN_SELECT             : "{select" <WS>   > { pushState(EXPR); }
| < CMD_CLOSE_SELECT             : "{/select}"      >

| < CMD_BEGIN_SWITCH             : "{switch" <WS>   > { pushState(EXPR); }
| < CMD_CLOSE_SWITCH             : "{/switch}"      >

| < CMD_BEGIN_CASE               : "{case" <WS>     > { pushState(EXPR); }
| < CMD_FULL_DEFAULT             : "{default}"      >

| < CMD_BEGIN_FOREACH            : "{foreach" <WS>  > { pushState(EXPR); }
| < CMD_FULL_IFEMPTY             : "{ifempty}"      >
| < CMD_CLOSE_FOREACH            : "{/foreach}"     >

| < CMD_OPEN_LOG                 : "{log}"          >
| < CMD_CLOSE_LOG                : "{/log}"         >
| < CMD_FULL_DEBUGGER            : "{debugger}"     >
| < CMD_BEGIN_IMPLICIT_PRINT     : "{"              > { pushState(IN_CMD_TAG_UNSTRUCTURED); }
}


// ------------ Step 2: Match the command text and closing delimiter ------------

<IN_CMD_TAG_UNSTRUCTURED, IN_CMD_TAG_STRUCTURED, EXPR, TYPE_EXPR> TOKEN: {
  < CMD_END : "}" > { popState(); }
| < CMD_SELF_CLOSE : "/}" > { popState(); }
}

<IN_CMD_TAG_UNSTRUCTURED> TOKEN: {
  < CMD_TEXT_DIRECTIVE_NAME: "|" <RAW_IDENT> >
// TODO(lukes): Once we merge in the ExpressionParser, use CommandTagAttribute () instead.
| < CMD_TEXT_PHNAME_ATTR: <WS_CHAR> "phname=\"" <RAW_IDENT> "\"" >
| < XXX_CMD_TEXT_PHNAME_NOT_IDENT: <WS_CHAR> "phname=\"" ( ~["\""] )* "\"" >
}

<IN_CMD_TAG_STRUCTURED> TOKEN: {
  < NAME: <RAW_IDENT> >
| < CMD_COLON: ":" >
| < CMD_EQ: "=" >
| < CMD_DOT: "." >
| < CMD_DASH: "-" >
}


// -------------------------------------------------------------------------------------------------
// Type expressions.

<TYPE_EXPR> TOKEN: {
  < T_NAME: <RAW_IDENT> >
| < T_DOT: "." >
| < T_LANGLE: "<" >
| < T_RANGLE: ">" >
| < T_LBRACKET: "[" >
| < T_RBRACKET: "]" >
| < T_COMMA: "," >
| < T_COLON : ":"  >
  // NOTE: this means that "|" <NAME> is a valid matchable token sequence. But for print
  // directives we have "|"<RAW_IDENT> as a single token.  This is bad since any|null will get
  // tokenized as <RAW_IDENT> <CMD_TEXT_DIRECTIVE_NAME> instead of <NAME> <T_VBAR> <NAME>.  The
  // reason this isn't currently a problem is because CMD_TEXT_DIRECTIVE_NAME is defined in a
  // different lexical state.  This will become a problem when we switch print node to use
  // structured tag parsing.
| < T_VBAR: "|" >
| < T_QMARK: "?" >
}


// -------------------------------------------------------------------------------------------------
// IN_CMD_TAG_UNSTRUCTURED matches arbitrary non-tag-closing strings.

<IN_CMD_TAG_UNSTRUCTURED> TOKEN: {
  // Allow any non-string token, or complete quoted string literals.
  < CMD_TEXT_ARBITRARY_TOKEN:
      ~["'", "\"", "}"]
    // | ("/" ~["}"])  // Allow /, but not /} (so we don't swallow self-closing tags)
    | "\""
      (
          ~["\"","\\"]
        | "\\" ~[]
      )*
      "\""
    // Must match <STRING> in ExpressionParser.jj, but allow newlines and lowercase hex literals
    // (for legacy templates).
    | "'"
      (
          ~["'","\\"]
        | "\\" ["n","r","t","b","f","\\","'","\""]
        | "\\u" (["0"-"9","A"-"F", "a"-"f"]){4}
      )*
      "'"
  >
  // Force friendly error messages by providing a token to match error cases.
| <XXX_INVALID_STRING_LITERAL: ["'", "\""]>
}


// -------------------------------------------------------------------------------------------------
// In a 'msg' block.

// The only difference between states TEMPLATE_DEFAULT and
// TEMPLATE_DEFAULT_IN_MSG_BLOCK is that the latter also create tokens for HTML tag open/close.
<TEMPLATE_DEFAULT_IN_MSG_BLOCK> TOKEN: {
  < MSG_HTML_TAG_OPEN:  "<" >
| < MSG_HTML_TAG_CLOSE: ">" >
}


// -------------------------------------------------------------------------------------------------
// In a 'literal' block.

// Collect the literal text using MORE.
<IN_LITERAL_BLOCK> MORE: {
  < <ANY_CHAR> >
}

// When we reach the '/literal' tag, return the collected text content (minus the end tag).
<IN_LITERAL_BLOCK> TOKEN: {
  < LITERAL_RAW_TEXT_CONTENT: "{/literal}" >
  {
    // Note: 'image' is cumulative over MOREs while 'lengthOfMatch' is just the end tag length.
    matchedToken.image = image.substring(0, image.length() - lengthOfMatch);
    popState();
  }
}


// -------------------------------------------------------------------------------------------------
// Text.

<TEMPLATE_DEFAULT, TEMPLATE_DEFAULT_IN_MSG_BLOCK> TOKEN: {
  < TOKEN_WS: <WS> >
| < TOKEN_NOT_WS: <NOT_WS> >
}


// =================================================================================================
// Soy expressions.
// =================================================================================================


// -------------------------------------------------------------------------------------------------
// Literals.

<EXPR> TOKEN: {
  < NULL: "null" >
| < TRUE: "true">
| < FALSE: "false" >
| < DEC_INTEGER: <DEC_DIGITS> >
| < HEX_INTEGER: "0x" (<HEX_DIGIT>)+ >
| < FLOAT:
        <DEC_DIGITS> "." <DEC_DIGITS> ( "e" ( ["+","-"] )? <DEC_DIGITS> )?
      | <DEC_DIGITS> "e" ( ["+","-"] )? <DEC_DIGITS>
  >
  // Must match <IN_CMD_TAG_UNSTRUCTURED> CMD_TEXT_ARBITRARY_TOKEN in SoyFileParser.jj.
| < STRING:
      "'"
      (
          ~["'","\\","\n","\r"]
        | "\\" ["n","r","t","b","f","\\","'","\""]
        | "\\u" (<HEX_DIGIT>){4}
      )*
      "'"
  >
| < #DEC_DIGITS: ( ["0"-"9"] )+ >
| < #HEX_DIGIT: ["0"-"9","A"-"F","a"-"f"] >
}


// -------------------------------------------------------------------------------------------------
// Operators.

<EXPR> TOKEN: {
  < QMARK: "?" >    // Precedence 1 operators
| < COLON: ":" >    // Also used as part of part of map literal syntax
| < QCOLON: "?:" >
| < OR: "or" >      // Precedence 2 operators
| < AND: "and" >    // Precedence 3 operators
| < EQ: "==">       // Precedence 4 operators
| < NOT_EQ: "!=" >
| < LANGLE: "<" >   // Precedence 5 operators
| < RANGLE: ">" >
| < LT_EQ: "<=" >
| < GT_EQ: ">=" >
| < PLUS: "+">      // Precedence 6 operators
| < MINUS: "-">     // Precedence 6 as a binary operator and 8 as a unary operator
| < TIMES: "*">     // Precedence 7 operators
| < DIV: "/">
| < MOD: "%">
| < NOT: "not" >    // Precedence 8 as a unary operator (along with MINUS)
| < DOT: "." >      // Precedence 9 operators
| < QDOT: "?." >
| < LBRACKET: "[" > // Precedence 9 data access operators and part of map literal syntax
| < RBRACKET: "]" >
| < QLBRACKET: "?[" >
| < COMMA: "," >    // Not actually an operator, part of map/list literal syntax
| < LPAREN: "(" >
| < RPAREN: ")" >
}


// -------------------------------------------------------------------------------------------------
// Identifiers.

<EXPR> TOKEN: {
  < IDENT: <RAW_IDENT> >
  // N.B. <IJ> needs to be defined above <DOLLAR_IDENT> so $ij isn't parsed as <DOLLAR_IDENT>
| < IJ:  "$ij" >
| < DOLLAR_IDENT: "$" <IDENT> >
}


// -------------------------------------------------------------------------------------------------
// Legacy tokens.

// Match everything else as an 'unexpected' or as a special LEGACY token. This prevents
// TokenMgrErrors from being thrown and instead this will get turned into ParseExceptions which
// have more debugging information.
<EXPR> TOKEN: {
  < LEGACY_AND : "&&" >
| < LEGACY_OR : "||" >
| < LEGACY_NOT : "!" >
  // We could support double quoted strings except for the fact that in some cases expressions
  // need to be able to be written in attribute values (variant expressions, data expressions).
  // It isn't clear how we would support double quoted strings in that context.  Similarly, this
  // is why the SoyFileParser requires attributes values to be double quoted.
| < DOUBLE_QUOTE : "\"" >
}



// =================================================================================================
// Private helper regexes.
// =================================================================================================

<*> TOKEN: {
  < #ANY_CHAR: ~[] >
| < #WS: " " | "\t" | "\n" | "\r" | "\r\n" >
| < #WS_CHAR: " " | "\t" | "\n" | "\r" >
| < #NOT_WS: ~[" ","\t","\n","\r"] >
| < #NOT_NL: ~["\n","\r"] >
| < #BRACE: ["{","}"] >
| < #RAW_IDENT: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
| < #LINE_COMMENT: "//" ( <NOT_NL> )* >
}


// Match everything else as an 'unexpected' token to prevent TokenMgrErrors from being thrown and
// instead this will get turned into ParseExceptions which have more debugging information.
// NOTE: this has to come after any single character token definition in these states.
// TODO(slaks): Apply to all states.
<DEFAULT, IN_CMD_TAG_STRUCTURED, EXPR, TYPE_EXPR> TOKEN: {
  < UNEXPECTED_TOKEN : ~[] >
}


// =================================================================================================
// Grammar
// =================================================================================================


/**
 * Matches the whole input if it is a valid Soy file.
 *
 * SoyFile -> [ DelpackageTag ] [ NamespaceTag ] ( AliasTag )* ( Template )* EOF
 */
private SoyFileNode SoyFile() :
{
  TemplateNode template;
  NamespaceDeclaration namespace;
  Identifier delpackageName = null;
  List<AliasDeclaration> aliases = ImmutableList.of();
  AliasDeclaration alias = null;
}
{
  [ delpackageName = DelPackage() ]

  namespace = Namespace()

  (
    alias = Alias()
    { if (aliases.isEmpty()) {
        aliases = new ArrayList<AliasDeclaration>();
      }
      if (alias != null) {
        aliases.add(alias);
      }
    }
  )*

  {
    SoyFileHeaderInfo soyFileHeaderInfo = new SoyFileHeaderInfo(errorReporter,
      delpackageName, namespace, aliases);
    context = SoyParsingContext.create(errorReporter, soyFileHeaderInfo.namespace,
        soyFileHeaderInfo.aliasToNamespaceMap);
    SoyFileNode sfn =
        new SoyFileNode(
            nodeIdGen.genId(),
            filePath,
            soyFileKind,
            namespace,
            soyFileHeaderInfo);
  }

  (
    template = Template(soyFileHeaderInfo)
    { if (template != null) {
        // it will be null if a parsing error occurred
        sfn.addChild(template);
      }
    }
  )+

  <EOF>

  { return sfn; }
}


/**
 * Matches an {alias ...} declaration.
 */
private AliasDeclaration Alias() :
{
  Token open, close;
  Identifier namespace, alias = null;
  Token as = null;
}
{
  (
    open = <ALIAS_OPEN>
    namespace = Identifier()
    [
      as = Keyword("as")
      alias = Identifier()
    ]
    close = <CMD_END>
  )
  {
    SourceLocation srcLoc = createSrcLoc(open, close);

    if (alias != null && !BaseUtils.isIdentifier(alias.identifier())) {
      errorReporter.report(srcLoc, INVALID_ALIAS_NAME, alias.identifier());
      return null;
    }

    String aliasString = (alias == null)
        ? BaseUtils.extractPartAfterLastDot(namespace.identifier())
        : alias.identifier();
    return new AliasDeclaration(namespace.identifier(), aliasString, srcLoc);
  }
}


/**
 * Matches a {namespace ...} declaration.
 */
private NamespaceDeclaration Namespace() :
{
  Token open, close;
  Identifier name;
  CommandTagAttribute attr;
  List<CommandTagAttribute> attributes;
}
{
  open = <NAMESPACE_OPEN>
  name = DottedIdent()
  attributes = CommandAttributes()
  close = <CMD_END>
  {
    return new NamespaceDeclaration(name, attributes, errorReporter);
  }
}


/**
 * Matches an arbitrary sequence of CommandAttributes()
 */
private List<CommandTagAttribute> CommandAttributes() :
{
  CommandTagAttribute attr;
  List<CommandTagAttribute> attributes = ImmutableList.of();
}
{
  (
    attr = Attribute()
    { if (attributes.isEmpty()) {
        attributes = new ArrayList<CommandTagAttribute>();
      }
      attributes.add(attr);
    }
  )*

  // None of our commands ever allow attributes to be duplicated.
  // Drop duplicates and report errors before returning to our caller.
  { CommandTagAttribute.removeDuplicatesAndReportErrors(attributes, errorReporter);
    return attributes;
  }
}


/**
 * Matches an attribute, starting from IN_CMD_TAG_STRUCTURED lexical state.
 *
 * Attribute -> <NAME> <CMD_EQ> <ATTRIBUTE_VALUE>
 */
private CommandTagAttribute Attribute() :
{
  Token name;
  Token eq;
  Token value;
}
{
  name = <NAME>
  eq = <CMD_EQ>
  value = <ATTRIBUTE_VALUE>
  {
    return new CommandTagAttribute(
        Identifier.create(name.image, createSrcLoc(name)),
        // trim quotes off the token and unescape internal quotation marks
        value.image.substring(1, value.image.length() - 1).replace("\\\"", "\""),
        createSrcLoc(value));
  }
}

/**
 * Matches an attribute, starting from EXPR lexical state. Ends in IN_CMD_TAG_STRUCTURED state.
 *
 * TODO(user): Once all tags are switched out of IN_CMD_TAG_UNSTRUCTURED, consider rolling
 * all uses of Attribute() into this state.
 *
 * Attribute -> <IDENT> <CMD_EQ> <ATTRIBUTE_VALUE>
 */
private CommandTagAttribute ExprAttribute() :
{
  Token name;
  Token eq;
  Token value;
}
{
  { token_source.SwitchTo(IN_CMD_TAG_STRUCTURED); }
  name = <IDENT>
  eq = <CMD_EQ>
  value = <ATTRIBUTE_VALUE>
  {
    return new CommandTagAttribute(
        Identifier.create(name.image, createSrcLoc(name)),
        // trim quotes off the token and unescape internal quotation marks
        value.image.substring(1, value.image.length() - 1).replace("\\\"", "\""),
        createSrcLoc(value));
  }
}


/**
 * Matches a {delpackage ...} declaration.
 */
private Identifier DelPackage() :
{
  Identifier name;
}
{
  <DELPACKAGE_OPEN>
  name = DottedIdent()
  <CMD_END>
  { return name; }
}


/**
 * Template -> (
 *   <TEMPLATE_OPEN>
 *   TemplateName()
 *   CommandAttributes()
 *   <CMD_END>
 *   TemplateHeader()
 *   TemplateBlock()
 *   <CMD_CLOSE_TEMPLATE>
 * |
 *   <DELTEMPLATE_OPEN>
 *   TemplateName()
 *   CommandAttributes()
 *   <CMD_END>
 *   TemplateHeader()
 *   TemplateBlock()
 *   <CMD_CLOSE_DELTEMPLATE>
 * )
 *
 * @param soyFileHeaderInfo Info from the containing Soy file's header declarations. Needed by the
 *     TemplateNode constructors.
 */
private TemplateNode Template(SoyFileHeaderInfo soyFileHeaderInfo) :
{
  Token open;
  TemplateNode templateNode = null;
  TemplateNodeBuilder builder;
}
{
  (
    open = <TEMPLATE_OPEN>
    { builder = new TemplateBasicNodeBuilder(soyFileHeaderInfo, errorReporter); }
    try {
      templateNode = TemplateHelper(builder, open, false)
      <CMD_CLOSE_TEMPLATE>
    } catch (ParseException e) {
      reportFileErrorAndSkipTo(e, CMD_CLOSE_TEMPLATE);
    } catch (AbortParsingError e) {
      // do nothing, continue trying to parse other templates
      return null;
    }

  | open = <DELTEMPLATE_OPEN>
    { builder = new TemplateDelegateNodeBuilder(soyFileHeaderInfo, errorReporter); }
    try {
      templateNode = TemplateHelper(builder, open, true)
      <CMD_CLOSE_DELTEMPLATE>
    } catch (ParseException e) {
      reportFileErrorAndSkipTo(e, CMD_CLOSE_DELTEMPLATE);
    } catch (AbortParsingError e) {
      // do nothing, continue trying to parse other templates
      return null;
    }
  )
  { return templateNode; }
}


/**
 * A helper for parsing everything except the open and close tags of a template.
 */
private TemplateNode TemplateHelper(TemplateNodeBuilder builder, Token open, boolean isDeltemplate) :
{
  Identifier templateName;
  List<CommandTagAttribute> attributes;
  Token close;
  RawTextNode initialWhitespace;
  List<StandaloneNode> templateBodyNodes;
}
{
  {
    // eagerly fetch the id to be backwards compatible.  if we delay allocating, all the ids in the
    // file will change.  TODO(user): remove ids
    builder.setId(nodeIdGen.genId());
  }
  templateName = TemplateName(isDeltemplate)
  attributes = CommandAttributes()
  {
    builder.setCommandValues(templateName, attributes);
    // We can't set soy doc until after setCommandValues due to conditions in the builder.
    // --- Set the SoyDoc. ---
    // special tokens are accessible from the non-special tokens that come after them.
    Token soyDoc = open.specialToken;
    if (soyDoc != null && soyDoc.kind == SOYDOC) {
      builder.setSoyDoc(soyDoc.image, createSrcLoc(soyDoc));
    }
    pushState(TEMPLATE_DEFAULT);
  }

  close = <CMD_END>
  { builder.setSourceLocation(createSrcLoc(open, close)); }

  initialWhitespace = TemplateHeader(builder)
  templateBodyNodes = TemplateBlock()

  {
    TemplateNode templateNode = builder.build();
    if (initialWhitespace != null) {
      templateNode.addChild(initialWhitespace);
    }
    templateNode.addChildren(templateBodyNodes);
    return templateNode;
  }
}


/**
 * Parses a Template name.  This is either a fully qualified dotted identifier or a partial
 * identifier consisting of a single <CMD_DOT> <NAME> sequence.
 *
 * TemplateName -> (<CMD_DOT> <NAME> | DottedIdent() )
 */
private Identifier TemplateName(boolean isDeltemplate) :
{
  Token dot, name;
  Identifier ident;
}
{
  (
    // The partial name case.
    dot = <CMD_DOT>
    name = <NAME>
    {
      ident = Identifier.create("." + name.image, createSrcLoc(dot, name));
      if (isDeltemplate) {
        errorReporter.report(ident.location(), INVALID_DELTEMPLATE_NAME, ident.identifier());
      }
    }
  |
    ident = DottedIdent()
    {
      if (!isDeltemplate) {
        errorReporter.report(ident.location(), INVALID_TEMPLATE_NAME, ident.identifier());
      }
    }
  )
  { return ident; }
}

/**
 * DottedIdent -> <NAME> (<CMD_DOT> <NAME>)*
 *
 * TODO(user): Merge with Identifier() - the two are identical save for lexical states
 * (IN_CMD_TAG_STRUCTURED vs EXPR)
 */
private Identifier DottedIdent() :
{
  StringBuilder sb = null;
  Token dot, name, next = null;
}
{
  name = <NAME>
  (
    dot = <CMD_DOT>
    next = <NAME>
    { if (sb == null) {
        sb = new StringBuilder();
        sb.append(name.image);
      }
      sb.append('.').append(next.image);
    }
  )*
  {
    return sb == null
      ? Identifier.create(name.image, createSrcLoc(name))
      : Identifier.create(sb.toString(), createSrcLoc(name, next));
  }
}


// =================================================================================================
// Grammar - Templates
// =================================================================================================


// =================================================================================================
// Grammar basics
// =================================================================================================


// -------------------------------------------------------------------------------------------------
// Soy tag parts.

/**
 * TODO(slaks): Eventually, replace this with tokens for actual command content (eg, attributes).
 * CmdText -> CmdTextParts
 */
private String CmdText():
{
  List<String> cmdTextParts;
}
{
  cmdTextParts = CmdTextParts()
  { return NO_SEP_JOINER.join(cmdTextParts); }
}

/**
 * Same as CmdText() but with source information.
 */
private SourceItemInfo<String> CmdTextWithSource():
{
  SourceItemInfo<List<String>> parts;
}
{
  parts = CmdTextPartsWithSource()
  {
    return newSourceItemInfo(
        NO_SEP_JOINER.join(parts.parsedContent()),
        parts.srcLocation());
  }
}

/**
 * CmdTextParts -> CmdTextPartsWithSource
 */
private List<String> CmdTextParts() :
{
  SourceItemInfo<List<String>> parts;
}
{
  parts = CmdTextPartsWithSource()
  {
    return parts.parsedContent();
  }
}

/**
 * CmdTextPartsWithSource -> ( CmdTextToken | CmdTextDirectiveName | CmdTextPhnameAttr )*
 */
private SourceItemInfo<List<String>> CmdTextPartsWithSource() :
{
  Token first = null;
  Token current = null;
  List<String> cmdTextParts = new ArrayList<String>();
  StringBuilder currCmdTextPartSb = new StringBuilder();
}
{
  (
    (
      current = <CMD_TEXT_ARBITRARY_TOKEN> { currCmdTextPartSb.append(current.image); }
    | (
        current = <CMD_TEXT_DIRECTIVE_NAME>
      | current = <CMD_TEXT_PHNAME_ATTR>
      )
      { // Add the preceding part if nonempty.
        if (currCmdTextPartSb.length() > 0) {
          cmdTextParts.add(currCmdTextPartSb.toString());
          currCmdTextPartSb.setLength(0);
        }
        // Add the special part.
        cmdTextParts.add(current.image);
      }
    )
  { if (first == null) {
      first = current;
    }
  }
  )*

  {
    // Add the last part if nonempty.
    if (currCmdTextPartSb.length() > 0) {
      cmdTextParts.add(currCmdTextPartSb.toString());
      currCmdTextPartSb.setLength(0);
    }

    // Process whitespace.
    // TODO(user): this is the beginning of a code path that should be eliminated.
    // These trimmed command strings are typically passed into Node constructors and then
    // re-passed into the expression parser for further parsing. The trimming and re-parsing
    // makes it hard to reconstruct accurate source location information for expression trees.
    // This file should be the source of truth for all source location information in Soy.
    for (int i = 0, n = cmdTextParts.size(); i < n; i++) {
      String cmdTextPart = cmdTextParts.get(i);
      if (i == 0) {
        cmdTextPart = CharMatcher.whitespace().trimLeadingFrom(cmdTextPart);
      }
      if (i == n - 1) {
        cmdTextPart = CharMatcher.whitespace().trimTrailingFrom(cmdTextPart);
      }
      cmdTextPart = LINE_BOUNDARY_PATTERN.matcher(cmdTextPart).replaceAll(" ");
      cmdTextParts.set(i, cmdTextPart);
    }
    SourceLocation location;
    if (current == null) {
      // use the most recently consumed token for the sourcelocation when the cmd text is empty.
      location = createSrcLoc(getToken(0));
    } else if (current == first) {
      location = createSrcLoc(first);
    } else {
      location = createSrcLoc(first, current);
    }
    return newSourceItemInfo(cmdTextParts, location);
  }
}

// -------------------------------------------------------------------------------------------------
// Raw text.

/**
 * Matches whitespace for the purpose of ignoring it.
 *
 * SkipWhitespace -> ( <TOKEN_WS> )*
 */
private void SkipWhitespace() : { }
{
  // The LOOKAHEAD here just suppresses a warning, we want the standard greedy behavior.
  ( LOOKAHEAD(1) <TOKEN_WS> )*
}


/**
 * RawTextNode -> ( BasicRawText | LiteralRawText | SpecialCharRawText )+
 *
 * May return null if all content is dropped (due to comments, line joining, etc).
 */
private RawTextNode RawText() :
{
  Token token;
  RawTextBuilder builder = new RawTextBuilder(filePath, nodeIdGen);
}
{
  // There is a choice conflict here because given a sequence of two characters we could parse it
  // as one RawTextNode containing two characters or 2 RawTextNodes each containing one char.
  // However, we always want the former, so we insert this LOOKAHEAD to suppress the
  // conflict warning since the default greedy behavior is what we want.
  ( LOOKAHEAD(1)
    (
      // basic tokens
      (
        token = <TOKEN_NOT_WS>
      | token = <TOKEN_WS>
      )
    { builder.addBasic(token); }
    |
      <CMD_OPEN_LITERAL>
      token = <LITERAL_RAW_TEXT_CONTENT>
    { builder.addLiteral(token); }
    |
      ( token = <CMD_FULL_SP>
      | token = <CMD_FULL_NIL>
      | token = <CMD_FULL_CR>
      | token = <CMD_FULL_LF>
      | token = <CMD_FULL_TAB>
      | token = <CMD_FULL_LB>
      | token = <CMD_FULL_RB>
      )
    { builder.addTextualCommand(token); }
    )
  )+

  { return builder.build(); }
}

// =================================================================================================
// Grammar
// =================================================================================================


// -------------------------------------------------------------------------------------------------
// Template header.


/**
 * Important: The template header consists of a sequence of ParamDecls() separated by optional
 * whitespace
 *
 * TemplateHeader -> ( Whitespace() | ParamDecl() )*
 *
 * Whether or not a particular piece of whitespace is part of the header or part of an initial raw
 * text node is ambiguous.  So if there is a trailing piece of non-trivial whitespace it will be
 * consumed here, and returned as RawTextNode.
 */
private RawTextNode TemplateHeader(TemplateNodeBuilder templateBuilder) :
{
  Token tok;
  HeaderParam param;
  List<HeaderParam> params = ImmutableList.of();
  RawTextNode whitespace = null;
  String soyDoc = null;
}
{
  ( LOOKAHEAD(1)  // prefer consuming whitespace here instead of in a subsequent RawTextNode
    (
      { RawTextBuilder builder = new RawTextBuilder(filePath, nodeIdGen); }

      ( LOOKAHEAD(1)  // prefer staying in the loop
        tok = <TOKEN_WS>
        { if (tok.specialToken != null) {
            soyDoc = tok.specialToken.image;
          }
          builder.addBasic(tok);
        }
      )+

      { whitespace = builder.build(); }
    |
      param = ParamDecl(soyDoc)
      {
        // we just parsed a param, preceding whitespace/doc comments are not important
        whitespace = null;
        soyDoc = null;
        if (params.isEmpty()) {
          params = new ArrayList<HeaderParam>();
        }
        params.add(param);
      }
    )
  )*

  { templateBuilder.addParams(params);
    return whitespace;
  }
}


/**
 * ParamDecl -> ( <DECL_BEGIN_PARAM> | <DECL_BEGIN_OPT_PARAM> | <DECL_BEGIN_INJECT_PARAM
                | <DECL_BEGIN_OPT_INJECT_PARAM ) <NAME> <CMD_COLON> TypeExpr() <CMD_END>
 *
 * @param desc The doc comment that was attached to whitespace preceding this param, if any.
 */
private HeaderParam ParamDecl(@Nullable String desc) :
{
  Token ws, tagBegin, name, tagEnd;
  TypeNode paramTypeNode = null;
  SoyType paramType = ErrorType.getInstance();
  String cmdText;
  Token blockDocComment;
  boolean optional = false;
  boolean inject = false;
}
{
  (
    tagBegin = <DECL_BEGIN_PARAM>
  | tagBegin = <DECL_BEGIN_OPT_PARAM>  { optional = true; }
  | tagBegin = <DECL_BEGIN_INJECT_PARAM>  { inject = true; }
  | tagBegin = <DECL_BEGIN_OPT_INJECT_PARAM> { inject = true; optional = true; }
  )
  // If there is a special token directly attached to the {@param, use that instead of whatever
  // was passed to us.
  { if (tagBegin.specialToken != null) {
      desc = tagBegin.specialToken.image;
    }
  }

  name = <NAME>

  <CMD_COLON>
  { token_source.SwitchTo(TYPE_EXPR); }

  try {
    paramTypeNode = TypeExpr()
    { paramType = typeRegistry.getOrCreateType(paramTypeNode, errorReporter); }
    tagEnd = <CMD_END>
  } catch (ParseException parseException) {
    tagEnd = reportTemplateBodyErrorAndSkipTo(parseException, CMD_END);
  }

  {
    if (desc != null) {
      // trim the leading /** and trailing */ as well as the whitespace from the doc comment.
      desc = desc.substring(3, desc.length() - 2).trim();
    }
    return new HeaderParam(
        name.image,
        createSrcLoc(name),
        // Optional params become nullable
        optional ? typeRegistry.getOrCreateUnionType(paramType, NullType.getInstance()) : paramType,
        paramTypeNode,
        // the param is required if it isn't optional and the parsed type isn't nullable.
        !optional && !SoyTypes.isNullable(paramType),
        inject,
        desc);
  }
}


// -------------------------------------------------------------------------------------------------
// Template block.


/**
 * TemplateBlock -> ( RawText | Stmt )*
 */
private List<StandaloneNode> TemplateBlock() :
{
  StandaloneNode node;
}
{
  { List<StandaloneNode> templateBlock = new ArrayList<StandaloneNode>(); }

  (
    (
      node = RawText()
    | node = Stmt()
    )

    {
      if (node != null) {
        templateBlock.add(node);
      }
    }
  )*

  { return templateBlock; }
}


// -------------------------------------------------------------------------------------------------
// Soy statements.


/**
 * Stmt -> NonPrintableStmt | PrintableStmt | ControlFlowStmt
 */
private StatementNode Stmt() :
{
  StatementNode stmt;
}
{
  (
    stmt = NonPrintableStmt()
  | stmt = PrintableStmt()
  | stmt = ControlFlowStmt()
  )

  { return stmt; }
}

/**
 * NonPrintableStmt -> LetStmt | LogStmt | DebuggerStmt
 */
private StatementNode NonPrintableStmt() :
{
  StatementNode stmt;
}
{
  (
    stmt = LetStmt()
  | stmt = LogStmt()
  | stmt = DebuggerStmt()
  )

  { return stmt; }
}

/**
 * PrintableStmt -> MsgStmt | XidStmt | CssStmt | CallStmt | PrintStmt
 */
private StatementNode PrintableStmt() :
{
  StatementNode stmt;
}
{
  (
    stmt = MsgStmt()
  | stmt = XidStmt()
  | stmt = CssStmt()
  | stmt = CallStmt()
  | stmt = PrintStmt()
  )

  { return stmt; }
}

/**
 * ControlFlowStmt -> IfStmt | SwitchStmt | ForeachStmt | ForStmt
 */
private StatementNode ControlFlowStmt() :
{
  StatementNode stmt;
}
{
  (
    stmt = IfStmt()
  | stmt = SwitchStmt()
  | stmt = ForeachStmt()
  | stmt = ForStmt()
  )

  { return stmt; }
}


/**
 * MsgStmt -> <CMD_BEGIN_MSG> CmdText <CMD_END> TemplateBlockForMsg
 *            ( <CMD_BEGIN_FALLBACK_MSG> CmdText <CMD_END> TemplateBlockForMsg )? <CMD_CLOSE_MSG>
 */
private MsgFallbackGroupNode MsgStmt() :
{
  String cmdText;
  List<StandaloneNode> templateBlockForMsg;
  Token tagBegin, tagEnd;
  MsgNode msgNode;
}
{
  tagBegin = <CMD_BEGIN_MSG>
  cmdText = CmdText()
  {
    pushState(TEMPLATE_DEFAULT_IN_MSG_BLOCK);
    Checkpoint checkpoint = errorReporter.checkpoint();
  }
  tagEnd = <CMD_END>
  {
    SourceLocation location = createSrcLoc(tagBegin, tagEnd);
    MsgFallbackGroupNode msgFbGrpNode = new MsgFallbackGroupNode(nodeIdGen.genId(), location);
    msgNode = MsgNode.msg(nodeIdGen.genId(), cmdText, location).build(context);
    msgFbGrpNode.addChild(msgNode);
  }
  templateBlockForMsg = TemplateBlockForMsg()
  { msgNode.addChildren(templateBlockForMsg); }

  (
    tagBegin = <CMD_BEGIN_FALLBACK_MSG>
    cmdText = CmdText()
    tagEnd = <CMD_END>
    {
      location = createSrcLoc(tagBegin, tagEnd);
      msgNode = MsgNode.fallbackmsg(nodeIdGen.genId(), cmdText, location).build(context);
      msgFbGrpNode.addChild(msgNode);
    }
    templateBlockForMsg = TemplateBlockForMsg()
    { msgNode.addChildren(templateBlockForMsg); }
  )?

  {
    if (errorReporter.errorsSince(checkpoint) || getToken(1).kind != CMD_CLOSE_MSG) {
      popStateIfStateIs(TEMPLATE_DEFAULT_IN_MSG_BLOCK);
    } else {
      popState();
    }
  }
  <CMD_CLOSE_MSG>

  { return msgFbGrpNode; }
}


/**
 * TemplateBlockForMsg -> (Whitespace) MsgPlural MaybeWhitespace
 *                        | MaybeWhitespace MsgSelect MaybeWhitespace
 *                        | ( ContiguousRawTextAsNode | Stmt | MsgHtmlTag )*
 */
private List<StandaloneNode> TemplateBlockForMsg() :
{
  RawTextNode rawText;
  MsgPlaceholderInitialNode stmt;
  MsgPlaceholderInitialNode msgHtmlTag;
  StandaloneNode msgPluralOrSelectNode;
  // The index of the plural or select node, if any
  int pluralOrSelectIndex = -1;
  // Whether or not the first node is just whitespace.
  boolean firstNodeIsWhitespace = false;
  List<StandaloneNode> templateBlock = new ArrayList<StandaloneNode>();
}
{
  // For template blocks, we have two different options.
  // 1. simple: a mix of raw text and place holders
  // 2. plurals and genders.
  //
  // Plurals and genders use the {plural} and {select} tags which work like {switch} statements but
  // they require that that are only preceeded and succeeded by whitespace.  To handle parsing this
  // without a non-trivial lookahead we search for and collect all initial whitespace into a special
  // raw text node.  This will allow us to trivially ignore it if we do parse a following {plural
  // or to just use it as a normal rawtextnode if we don't.

  // try to collect all leading whitespace into a raw text node on its own.
  // This will make it possible to detect if a leading {plural} or {select} was preceeded by content
  [ LOOKAHEAD(1)  // prefer taking this branch over skipping and consuming as RawText
    { Token tok;
      RawTextBuilder builder = new RawTextBuilder(filePath, nodeIdGen);
    }
    ( LOOKAHEAD(1)  // prefer staying in the loop
      tok = <TOKEN_WS>
      { builder.addBasic(tok); }
    )+
    {
      rawText = builder.build();
      if (rawText != null) {
        firstNodeIsWhitespace = true;
        templateBlock.add(rawText);
      }
    }
  ]
  (
    (
      msgPluralOrSelectNode = MsgPlural()
    | msgPluralOrSelectNode = MsgSelect()
    )
    SkipWhitespace()  // we want to ignore all whitespace after a plural or select, just expect it
  {
    if (firstNodeIsWhitespace) {
      // The first node was just basic whitespace.  Which is allowed but ignored prior to a plural
      // or select.  So just drop it.
      templateBlock.remove(0);
      firstNodeIsWhitespace = false;
    }
    if (pluralOrSelectIndex == -1) {
      pluralOrSelectIndex = templateBlock.size();
    }
    templateBlock.add(msgPluralOrSelectNode);
  }
  | rawText = RawText() { templateBlock.add(rawText); }
  | stmt = CallStmt()  { templateBlock.add(new MsgPlaceholderNode(nodeIdGen.genId(), stmt)); }
  | stmt = PrintStmt() { templateBlock.add(new MsgPlaceholderNode(nodeIdGen.genId(), stmt)); }
  | msgHtmlTag = MsgHtmlTag()
    { templateBlock.add(new MsgPlaceholderNode(nodeIdGen.genId(), msgHtmlTag)); }
  )*

  {
    // Plural/select are only allowed if they are the only child
    // However we do allow them to be prefixed or suffixed with arbitrary amounts of whitespace.
    if (pluralOrSelectIndex != -1) {
      StandaloneNode pluralOrSelect = templateBlock.get(pluralOrSelectIndex);
      for (int i = 0; i < templateBlock.size(); i++) {
        if (i == pluralOrSelectIndex) {
          continue;
        }
        errorReporter.report(
          // blame the current node
          templateBlock.get(i).getSourceLocation(),
          i < pluralOrSelectIndex ? UNEXPECTED_CONTENT_BEFORE : UNEXPECTED_CONTENT_AFTER,
          pluralOrSelect instanceof MsgPluralNode ? "{plural" : "{select");
      }
      // return the single plural or select and drop the other items.  We have either reported
      // errors or have ignored them because they are purely whitespace.
      return ImmutableList.of(pluralOrSelect);
    }
    return templateBlock;
  }
}


/**
 * MsgPlural -> CmdBeginPlural Expr [ ExprAttribute ] CmdEnd SkipWhitespace
 *              ( CmdBeginCase Expr CmdEnd TemplateBlockForMsg )*
 *              CmdFullDefault TemplateBlockForMsg CmdClosePlural
 */
private MsgPluralNode MsgPlural() :
{
  Token tagBegin, tagEnd;
  Token defaultTag;
  ExprNode pluralExpr;
  ExprNode caseExpr;
  CommandTagAttribute offsetAttr = null;
  List<StandaloneNode> templateBlock;
}
{
  tagBegin = <CMD_BEGIN_PLURAL>
  try {
    pluralExpr = Expr()
    [ offsetAttr = ExprAttribute() ]
    tagEnd = <CMD_END>
  } catch (ParseException e) {
    pluralExpr = errorExpr(tagBegin);
    tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END);
  }

  {
    int offset = 0;

    if (offsetAttr != null) {
      if (pluralExpr.getSourceLocation().isJustBefore(offsetAttr.getName().location())) {
        errorReporter.report(
            offsetAttr.getName().location(),
            PARSER_ERROR,
            offsetAttr.getName().identifier(),
            "whitespace");
      }

      if (!offsetAttr.getName().identifier().equals("offset")) {
        errorReporter.report(
            offsetAttr.getName().location(),
            CommandTagAttribute.UNSUPPORTED_ATTRIBUTE_KEY_SINGLE,
            offsetAttr.getName().identifier(),
            "plural",
            "offset");
        offsetAttr = null;
      }
    }

    if (offsetAttr != null) {
      offset = offsetAttr.valueAsInteger(errorReporter, 0);
      if (offset <= 0) {
        errorReporter.report(offsetAttr.getValueLocation(), PLURAL_OFFSET_OUT_OF_BOUNDS, offset);
        offset = 0;
      }
    }

    MsgPluralNode pluralNode =
        new MsgPluralNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), pluralExpr, offset);
  }

  // consume all whitespace between {plural} and the first {case}
  // later {case} and {default} tags will naturally consume whitespace due via RawText()
  SkipWhitespace()

  try {
    (
      tagBegin = <CMD_BEGIN_CASE>
      caseExpr = Expr()
      tagEnd = <CMD_END>
      {
        int value;
        if (!(caseExpr instanceof IntegerNode)) {
          if (caseExpr instanceof NegativeOpNode) {
            errorReporter.report(
                caseExpr.getSourceLocation(),
                PLURAL_CASE_OUT_OF_BOUNDS,
                caseExpr.toSourceString());
          } else {
            errorReporter.report(caseExpr.getSourceLocation(), PLURAL_CASE_MALFORMED);
          }
          value = 0;
        } else {
          value = (int) ((IntegerNode) caseExpr).getValue();
          if (value < 0) {
            errorReporter.report(caseExpr.getSourceLocation(), PLURAL_CASE_OUT_OF_BOUNDS, value);
            value = 0;
          }
        }

        MsgPluralCaseNode caseNode =
            new MsgPluralCaseNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), value);
        pluralNode.addChild(caseNode);
      }

      templateBlock = TemplateBlockForMsg()
      { if (templateBlock.size() == 1 &&
            (templateBlock.get(0) instanceof MsgPluralNode ||
             templateBlock.get(0) instanceof MsgSelectNode )) {
          errorReporter.report(
              templateBlock.get(0).getSourceLocation(),
              PLURAL_AND_SELECT_NOT_ALLOWED_INSIDE_PLURAL_BLOCK);
        }
        caseNode.addChildren(templateBlock);
      }
    )*

    defaultTag = <CMD_FULL_DEFAULT>
    {
      MsgPluralDefaultNode defaultNode =
          new MsgPluralDefaultNode(nodeIdGen.genId(), createSrcLoc(defaultTag));
      pluralNode.addChild(defaultNode);
    }

    templateBlock = TemplateBlockForMsg()
    { if (templateBlock.size() == 1 &&
          (templateBlock.get(0) instanceof MsgPluralNode ||
           templateBlock.get(0) instanceof MsgSelectNode )) {
        errorReporter.report(
            templateBlock.get(0).getSourceLocation(),
            PLURAL_AND_SELECT_NOT_ALLOWED_INSIDE_PLURAL_BLOCK);
      }
      defaultNode.addChildren(templateBlock);
    }

    <CMD_CLOSE_PLURAL>
  } catch (ParseException e) {
    // report and keep going to maintain previous behavior around reporting errors for unexpected
    // textual content before the first {case} tag
    reportTemplateBodyErrorAndSkipTo(e, CMD_CLOSE_PLURAL);
  }

  { return pluralNode; }
}


/**
 * MsgSelect -> CmdBeginSelect Expr CmdEnd SkipWhitespace
 *              ( CmdBeginCase Expr CmdEnd TemplateBlockForMsg )*
 *              CmdFullDefault TemplateBlockForMsg CmdCloseSelect
 */
private MsgSelectNode MsgSelect() :
{
  Token tagBegin, tagEnd;
  Token defaultTag;
  ExprNode selectExpr;
  ExprNode caseExpr;
  List<StandaloneNode> templateBlock;
}
{
  tagBegin = <CMD_BEGIN_SELECT>
  try {
    selectExpr = Expr()
    tagEnd = <CMD_END>
  } catch (ParseException e) {
    selectExpr = errorExpr(tagBegin);
    tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END);
  }

  {
    MsgSelectNode selectNode =
        new MsgSelectNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), selectExpr);
  }

  // consume all whitespace between {select} and the first {case}
  // later {case} and {default} tags will naturally consume whitespace due to RawText()
  SkipWhitespace()

  try {
    (
      tagBegin = <CMD_BEGIN_CASE>
      caseExpr = Expr()
      tagEnd = <CMD_END>
      {
        String value;
        if (!(caseExpr instanceof StringNode)) {
          errorReporter.report(caseExpr.getSourceLocation(), SELECT_CASE_INVALID_VALUE);
          value = "";
        } else {
          value = ((StringNode) caseExpr).getValue();
        }

        MsgSelectCaseNode caseNode =
            new MsgSelectCaseNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), value);
        selectNode.addChild(caseNode);
      }

      templateBlock = TemplateBlockForMsg()
      { caseNode.addChildren(templateBlock); }
    )*

    defaultTag = <CMD_FULL_DEFAULT>
    {
      MsgSelectDefaultNode defaultNode =
          new MsgSelectDefaultNode(nodeIdGen.genId(), createSrcLoc(defaultTag));
      selectNode.addChild(defaultNode);
    }

    templateBlock = TemplateBlockForMsg()
    { defaultNode.addChildren(templateBlock); }

    <CMD_CLOSE_SELECT>
  } catch (ParseException e) {
    reportTemplateBodyErrorAndSkipTo(e, CMD_CLOSE_SELECT);
  }

  { return selectNode; }
}


/**
 * MsgHtmlTag -> MsgHtmlTagOpen TemplateBlock MsgHtmlTagClose
 */
private MsgHtmlTagNode MsgHtmlTag() :
{
  Token htmlTagOpen;
  List<StandaloneNode> templateBlock;
}
{
  htmlTagOpen = <MSG_HTML_TAG_OPEN>
  templateBlock = TemplateBlock()
  <MSG_HTML_TAG_CLOSE>

  {
    SourceLocation srcLoc = createSrcLoc(htmlTagOpen);
    // TODO(lukes): Massively simplify this by creating more nodes.  Also fix SourceLocation.
    // First, we add back the HTML tag's opening and closing angle brackets.
    // Minor note: If there's only one RawTextNode, we'll replace it twice. No big deal.
    if (templateBlock.get(0) instanceof RawTextNode) {
      RawTextNode firstNode = (RawTextNode) templateBlock.get(0);
      RawTextNode newNode = new RawTextNode(
          nodeIdGen.genId(),
          "<" + firstNode.getRawText(),
          srcLoc.extend(firstNode.getSourceLocation()));
      templateBlock.set(0, newNode);
    } else {
      templateBlock.add(0, new RawTextNode(nodeIdGen.genId(), "<", srcLoc));
    }
    int lastNodeIndex = templateBlock.size() - 1;
    if (templateBlock.get(lastNodeIndex) instanceof RawTextNode) {
      RawTextNode lastNode = (RawTextNode) templateBlock.get(lastNodeIndex);
      RawTextNode newNode =
          new RawTextNode(nodeIdGen.genId(), lastNode.getRawText() + ">",
          lastNode.getSourceLocation().extend(srcLoc));

      templateBlock.set(lastNodeIndex, newNode);
    } else {
      templateBlock.add(new RawTextNode(nodeIdGen.genId(), ">", srcLoc));
    }
    return new MsgHtmlTagNode.Builder(
        nodeIdGen.genId(),
        ImmutableList.copyOf(templateBlock),
        createSrcLoc(htmlTagOpen))
        .build(errorReporter);
  }
}


/**
 * PrintTag -> ( <CMD_BEGIN_PRINT> | <CMD_BEGIN_IMPLICIT_PRINT> ) CmdTextParts() <CMD_END>
 */
private SourceItemInfo<List<String>> PrintTag() :
{
  Token tagBegin, tagEnd;
  List<String> cmdTextParts;
  List<String> printTagParts = new ArrayList<String>();
}
{

  (
    tagBegin = <CMD_BEGIN_PRINT>  { printTagParts.add("print"); }
  | tagBegin = <CMD_BEGIN_IMPLICIT_PRINT>  // Implicit print
  )
  cmdTextParts = CmdTextParts()
  { printTagParts.addAll(cmdTextParts); }
  tagEnd = <CMD_END>

  {
    if (printTagParts.isEmpty()) {
      // This error is reported in the command, to catch both {print} and {}.
    } else if (printTagParts.get(0).startsWith("/")) {
      errorReporter.report(createSrcLoc(tagBegin, tagEnd), UNEXPECTED_CLOSING_TAG,
          "{" + Joiner.on("").join(printTagParts) + "}");
    } else if (printTagParts.get(0).startsWith("@")) {
      errorReporter.report(createSrcLoc(tagBegin, tagEnd), INVALID_DECLARATION,
          "{" + printTagParts.get(0));
    } else if (printTagParts.get(0).startsWith("{")) {
      errorReporter.report(createSrcLoc(tagBegin, tagEnd), FOUND_DOUBLE_BRACE);
    } else if (INVALID_PRINT_FILE_PREFIX_PATTERN.matcher(printTagParts.get(0)).matches()) {
      errorReporter.report(createSrcLoc(tagBegin, tagEnd), INVALID_TEMPLATE_COMMAND,
          "{" + printTagParts.get(0));
    } else if (INVALID_PRINT_PREFIX_PATTERN.matcher(printTagParts.get(0)).matches()) {
      errorReporter.report(createSrcLoc(tagBegin, tagEnd), INVALID_PRINT_PREFIX,
          "{" + printTagParts.get(0));
    }
    return newSourceItemInfo(printTagParts, tagBegin, tagEnd);
  }
}

/**
 * PrintStmt -> PrintTag
 */
private PrintNode PrintStmt() :
{
  Token tagBegin, tagEnd;
  List<String> cmdTextParts;
  boolean isImplicit;
}
{
  (
    tagBegin = <CMD_BEGIN_PRINT>  { isImplicit = false; }
  | tagBegin = <CMD_BEGIN_IMPLICIT_PRINT>  { isImplicit = true; }
  )
  cmdTextParts = CmdTextParts()
  tagEnd = <CMD_END>
  {
    SourceLocation location = createSrcLoc(tagBegin, tagEnd);
    // This will also capture invalid forms of actual commands that did not match those commands'
    // actual tokens (eg, `{else blah}`), then try to parse them as implicit prints.  We check for
    // these errors here, catching any kind of invalid construction that starts with { and is not
    // matched by a token.
    if (cmdTextParts.isEmpty()) {
      errorReporter.report(location, PRINT_COMMAND_WITH_EMPTY_TEXT);
    } else if (cmdTextParts.get(0).startsWith("/")) {
      errorReporter.report(location, UNEXPECTED_CLOSING_TAG,
          "{" + Joiner.on("").join(cmdTextParts) + "}");
    } else if (cmdTextParts.get(0).startsWith("@")) {
      errorReporter.report(location, INVALID_DECLARATION, "{" + cmdTextParts.get(0));
    } else if (cmdTextParts.get(0).startsWith("{")) {
      errorReporter.report(location, FOUND_DOUBLE_BRACE);
    } else if (INVALID_PRINT_FILE_PREFIX_PATTERN.matcher(cmdTextParts.get(0)).matches()) {
      errorReporter.report(location, INVALID_TEMPLATE_COMMAND, "{" + cmdTextParts.get(0));
    } else if (INVALID_PRINT_PREFIX_PATTERN.matcher(cmdTextParts.get(0)).matches()) {
      errorReporter.report(location, INVALID_PRINT_PREFIX, "{" + cmdTextParts.get(0));
    }

    // ------ Process command name (implicit or explicit). ------
    String cmdText = Joiner.on("").join(cmdTextParts);

    // ------ Process 'phname' attribute (if any). ------
    String phnameAttr = null;
    for (String cmdTextPart : cmdTextParts) {
      if (cmdTextPart.startsWith(" phname=\"") && cmdTextPart.endsWith("\"")) {
        if (phnameAttr != null) {
          errorReporter.report(location, MULTIPLE_PHNAME_ATTRIBUTES_IN_COMMAND, cmdText);
        }
        phnameAttr = cmdTextPart;
      }
    }
    String userSuppliedPhName;
    if (phnameAttr != null) {
      cmdTextParts.remove(phnameAttr);
      userSuppliedPhName = phnameAttr.substring(9, phnameAttr.length() - 1);
    } else {
      userSuppliedPhName = null;
    }

    // ------ Process expression. ------
    // Note: First part is expression, rest of parts are directives or directive args.
    // if cmdTextParts is empty, we already reported an error above, so pretend it is a literal
    // empty string and keep going.
    String exprText = cmdTextParts.isEmpty() ? "''" : cmdTextParts.get(0).trim();
    PrintNode printNode
        = new PrintNode.Builder(nodeIdGen.genId(), isImplicit, location)
            .exprText(exprText)
            .userSuppliedPlaceholderName(userSuppliedPhName)
            .build(context);

    // ------ Process directives (if any). ------
    String directiveName = null;
    for (int i = 1, n = cmdTextParts.size(); i < n; i++) {
      String cmdTextPart = cmdTextParts.get(i);

      if (cmdTextPart.startsWith("|")) {
        // Create previous directive and save current directive name.
        if (directiveName != null) {
          printNode.addChild(new PrintDirectiveNode.Builder(
              nodeIdGen.genId(), directiveName, "", location)
              .build(context));
        }
        directiveName = cmdTextPart;

      } else if (cmdTextPart.startsWith(":")) {
        // Create previous directive with current args text.
        if (directiveName == null) {
          throw new AssertionError();
        }
        String argsText = cmdTextPart.substring(1);
        printNode.addChild(new PrintDirectiveNode.Builder(
            nodeIdGen.genId(), directiveName, argsText, location)
            .build(context));
        directiveName = null;

      } else if (cmdTextPart.trim().length() == 0) {
        continue;

      } else {
        errorReporter.report(printNode.getSourceLocation(), INVALID_PRINT_COMMAND_TEXT, cmdText);
      }
    }
    // Add last directive.
    if (directiveName != null) {
      printNode.addChild(new PrintDirectiveNode.Builder(
          nodeIdGen.genId(), directiveName, "", location)
          .build(context));
    }

    return printNode;
  }
}


/**
 * XidStmt -> CmdBeginXid Name ( ( "." Name )+ | ( - Name )+ )? CmdEnd
 *
 * Valid xid names are one or more identifiers, separated by either all dots or all dashes, but
 * not both in the same xid.
 */
private XidNode XidStmt() :
{
  Token tagBegin, tok;
  Token tagEnd = null;
  Token first = null;
  StringBuilder value = null;
}
{
  tagBegin = <CMD_BEGIN_XID>

  try {
    first = <NAME>
    (
      (
        <CMD_DOT>
        tok = <NAME>
        { if (value == null) {
            value = new StringBuilder().append(first.image);
          }
          value.append('.').append(tok.image);
        }
      )+
    |
      (
        <CMD_DASH>
        tok = <NAME>
        { if (value == null) {
            value = new StringBuilder().append(first.image);
          }
          value.append('-').append(tok.image);
        }
      )+
    )?

    tagEnd = <CMD_END>

  } catch (ParseException e) {
    reportTemplateBodyErrorAndSkipTo(e, CMD_END);
    return null;
  }

  { String xid = (value == null) ? first.image : value.toString();
    return new XidNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), xid); }
}


/**
 * CssStmt -> CssTag
 */
private CssNode CssStmt() :
{
  Token tagBegin, tagEnd;
  String cmdText;
}
{
  tagBegin = <CMD_BEGIN_CSS>
  cmdText = CmdText()
  tagEnd = <CMD_END>
  {
    return new CssNode.Builder(nodeIdGen.genId(), cmdText, createSrcLoc(tagBegin, tagEnd))
        .build(context);
  }
}


/**
 * LetStmt -> CmdBeginLet
 *            ( ":" Expr CmdSelfClose | [ ExprAttribute ] CmdEnd TemplateBlock CmdCloseLet )
 */
private LetNode LetStmt() :
{
  Token tagBegin, tagEnd = null, colon = null;
  VarRefNode letVar = null;
  ExprNode valueExpr = null;
  CommandTagAttribute attr = null;
  List<StandaloneNode> templateBlock = ImmutableList.of();
}
{
  tagBegin = <CMD_BEGIN_LET>

  try {
    letVar = VarRef()

    (
      // Value expression
      colon = <COLON>
      valueExpr = Expr()
      tagEnd = <CMD_SELF_CLOSE>
    |
      // Content block
      [
        attr = ExprAttribute()
        {
          if (!attr.getName().identifier().equals("kind")) {
            errorReporter.report(
                attr.getName().location(),
                CommandTagAttribute.UNSUPPORTED_ATTRIBUTE_KEY_SINGLE,
                attr.getName().identifier(),
                "let",
                "kind");
            attr = null;
          }
        }
      ]
      tagEnd = <CMD_END>
      templateBlock = TemplateBlock()
      <CMD_CLOSE_LET>
    )
  } catch (ParseException e) {
    if (tagEnd == null) {
      tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END, CMD_SELF_CLOSE);

      // If this is a let content block, still parse the content body but throw it away.
      if ((letVar != null && colon == null) || (letVar == null && tagEnd.kind == CMD_END)) {
        templateBlock = TemplateBlock();
        skipTo(CMD_CLOSE_LET);
      }

      return null;
    }

    // If tagEnd != null, then this error is from TemplateBlock() or CMD_CLOSE_LET. Propagate.
    throw e;
  }

  {
    SourceLocation loc = createSrcLoc(tagBegin, tagEnd);

    if (valueExpr != null) {
      return new LetValueNode(nodeIdGen.genId(), loc, letVar.getName(), valueExpr);
    }

    ContentKind contentKind = (attr != null) ? attr.valueAsContentKind(errorReporter) : null;
    LetContentNode node = new LetContentNode(nodeIdGen.genId(), loc, letVar.getName(), contentKind);
    node.addChildren(templateBlock);
    return node;
  }
}


/**
 * IfStmt -> CmdBeginIf Expr CmdEnd TemplateBlock
 *           ( CmdBeginElseif Expr CmdEnd TemplateBlock )*
 *           [ CmdFullElse TemplateBlock ]
 *           CmdCloseIf
 */
private IfNode IfStmt() :
{
  Token tagBegin, tagEnd;
  Token elseTag;
  ExprNode ifExpr;
  List<StandaloneNode> templateBlock;
}
{
  tagBegin = <CMD_BEGIN_IF>
  try {
    ifExpr = Expr()
    tagEnd = <CMD_END>
  } catch (ParseException e) {
    ifExpr = errorExpr(tagBegin);
    tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END);
  }

  {
    SourceLocation location = createSrcLoc(tagBegin, tagEnd);
    IfNode ifNode = new IfNode(nodeIdGen.genId(), location);
    IfCondNode ifCondNode = new IfCondNode(nodeIdGen.genId(), location, "if", ifExpr);
    ifNode.addChild(ifCondNode);
  }

  templateBlock = TemplateBlock()
  { ifCondNode.addChildren(templateBlock); }

  (
    tagBegin = <CMD_BEGIN_ELSEIF>
    try {
      ifExpr = Expr()
      tagEnd = <CMD_END>
    } catch (ParseException e) {
      ifExpr = errorExpr(tagBegin);
      tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END);
    }

    {
      location = createSrcLoc(tagBegin, tagEnd);
      ifCondNode = new IfCondNode(nodeIdGen.genId(), location, "elseif", ifExpr);
      ifNode.addChild(ifCondNode);
    }

    templateBlock = TemplateBlock()
    { ifCondNode.addChildren(templateBlock); }
  )*

  [
    elseTag = <CMD_FULL_ELSE>
    {
      IfElseNode ifElseNode = new IfElseNode(nodeIdGen.genId(), createSrcLoc(elseTag));
      ifNode.addChild(ifElseNode);
    }

    templateBlock = TemplateBlock()
    { ifElseNode.addChildren(templateBlock); }
  ]

  <CMD_CLOSE_IF>

  { return ifNode; }
}


/**
 * SwitchStmt -> CmdBeginSwitch Expr CmdEnd SkipWhitespace
 *               ( CmdBeginCase ExprList CmdEnd TemplateBlock )+
 *               [ CmdFullDefault TemplateBlock ]
 *               CmdCloseSwitch
 */
private SwitchNode SwitchStmt() :
{
  Token tagBegin, tagEnd;
  Token defaultTag;
  ExprNode switchExpr;
  ImmutableList<ExprNode> caseExprs;
  List<StandaloneNode> templateBlock;
}
{
  tagBegin = <CMD_BEGIN_SWITCH>
  try {
    switchExpr = Expr()
    tagEnd = <CMD_END>
  } catch (ParseException e) {
    switchExpr = errorExpr(tagBegin);
    tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END);
  }

  {
    SwitchNode switchNode =
        new SwitchNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), switchExpr);
  }

  // consume all whitespace between {switch} and the first {case}
  // later {case} and {default} tags will naturally consume and drop whitespace due to how RawText()
  // line joining works
  SkipWhitespace()

  try {
    (
      tagBegin = <CMD_BEGIN_CASE>
      caseExprs = ExprList()
      tagEnd = <CMD_END>
      {
        SwitchCaseNode caseNode =
            new SwitchCaseNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), caseExprs);
        switchNode.addChild(caseNode);
      }

      templateBlock = TemplateBlock()
      { caseNode.addChildren(templateBlock); }
    )+

    [
      defaultTag = <CMD_FULL_DEFAULT>
      {
        SwitchDefaultNode defaultNode =
            new SwitchDefaultNode(nodeIdGen.genId(), createSrcLoc(defaultTag));
        switchNode.addChild(defaultNode);
      }

      templateBlock = TemplateBlock()
      { defaultNode.addChildren(templateBlock); }
    ]

    <CMD_CLOSE_SWITCH>
  } catch (ParseException e) {
    reportTemplateBodyErrorAndSkipTo(e, CMD_CLOSE_SWITCH);
  }

  { return switchNode; }
}


/**
 * ForeachStmt -> CmdBeginForeach VarRef Ident Expr CmdEnd TemplateBlock
 *                [ CmdFullIfempty TemplateBlock ] CmdCloseForeach
 */
private ForeachNode ForeachStmt() :
{
  Token tagBegin, tagEnd, in, ifemptyTag;
  VarRefNode var = null;
  ExprNode expr = null;
  List<StandaloneNode> templateBlock;
}
{
  tagBegin = <CMD_BEGIN_FOREACH>

  try {
    var = VarRef()
    in = Keyword("in")
    expr = Expr()

    tagEnd = <CMD_END>
  } catch (ParseException e) {
    tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END);

    if (var == null) {
      var = errorExpr(tagBegin);
    }
    if (expr == null) {
      expr = errorExpr(tagBegin);
    }
  }

  {
    ForeachNode foreachNode =
        new ForeachNode(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), expr);
    ForeachNonemptyNode nonEmpty =
        new ForeachNonemptyNode(nodeIdGen.genId(), var.getSourceLocation(), var.getName());
    foreachNode.addChild(nonEmpty);
  }

  templateBlock = TemplateBlock()
  { nonEmpty.addChildren(templateBlock); }

  [
    ifemptyTag = <CMD_FULL_IFEMPTY>
    templateBlock = TemplateBlock()
    {
      ForeachIfemptyNode ifempty =
          new ForeachIfemptyNode(nodeIdGen.genId(), createSrcLoc(ifemptyTag));
      ifempty.addChildren(templateBlock);
      foreachNode.addChild(ifempty);
    }
  ]

  <CMD_CLOSE_FOREACH>

  { return foreachNode; }
}


/**
 * ForStmt -> CmdBeginFor VarRef Ident Expr CmdEnd TemplateBlock CmdCloseFor
 */
private ForNode ForStmt() :
{
  Token tagBegin, tagEnd, in;
  VarRefNode forVar = null;
  ExprNode rangeExpr;
  List<ExprNode> rangeArgs = ImmutableList.of();
  List<StandaloneNode> templateBlock;
}
{
  tagBegin = <CMD_BEGIN_FOR>

  try {
    forVar = VarRef()
    in = Keyword("in")
    rangeExpr = Expr()
    {
      // Same as above, we do not want to make "range" a token.
      if (!(rangeExpr instanceof FunctionNode)
          || !((FunctionNode) rangeExpr).getFunctionName().equals("range")) {
        errorReporter.report(
            rangeExpr.getSourceLocation(), PARSER_ERROR, rangeExpr.toSourceString(), "range()");
      } else {
        rangeArgs = ((FunctionNode) rangeExpr).getChildren();
        if (rangeArgs.size() == 0 || rangeArgs.size() > 3) {
          errorReporter.report(rangeExpr.getSourceLocation(), INVALID_RANGE_SPECIFICATION);
        }
      }
    }

    tagEnd = <CMD_END>
  } catch (ParseException e) {
    tagEnd = reportTemplateBodyErrorAndSkipTo(e, CMD_END);

    if (forVar == null) {
      forVar = errorExpr(tagBegin);
    }
  }

  {
    ForNode forNode =
        new ForNode(
            nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd), errorReporter, forVar, rangeArgs);
  }

  templateBlock = TemplateBlock()
  { forNode.addChildren(templateBlock); }

  <CMD_CLOSE_FOR>

  { return forNode; }
}


/**
 * CallStmt ->
 *   <CMD_BEGIN_CALL> CmdTextParts() (<CMD_SELF_CLOSE> | <CMD_END> CallParams <CMD_CLOSE_CALL>)
 * | <CMD_BEGIN_DELCALL> CmdTextParts() (<CMD_SELF_CLOSE> | <CMD_END> CallParams <CMD_CLOSE_DELCALL>)
 */
private CallNode CallStmt() :
{
  Token tagBegin, tagEnd;
  List<String> cmdTextParts;
  CallNode callNode = null;
}
{
  (
    tagBegin = <CMD_BEGIN_CALL>
    cmdTextParts = CmdTextParts()
    (
      tagEnd = <CMD_SELF_CLOSE>
      { callNode =
          setCommandTextAndPlaceholderName(
              new CallBasicNode.Builder(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd)),
              cmdTextParts)
              .build(context);
      }
    |
      tagEnd = <CMD_END>
      { callNode =
          setCommandTextAndPlaceholderName(
              new CallBasicNode.Builder(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd)),
              cmdTextParts)
              .build(context);
      }
      try {
        AddParams(callNode)
        <CMD_CLOSE_CALL>
      } catch (ParseException e) {
        reportTemplateBodyErrorAndSkipTo(e, CMD_CLOSE_CALL);
      }
    )
  |
    tagBegin = <CMD_BEGIN_DELCALL>
    cmdTextParts = CmdTextParts()
    (
      tagEnd = <CMD_SELF_CLOSE>
      { callNode =
          setCommandTextAndPlaceholderName(
              new CallDelegateNode.Builder(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd)),
              cmdTextParts)
              .build(context);
      }
    |
      tagEnd = <CMD_END>
      { callNode =
          setCommandTextAndPlaceholderName(
              new CallDelegateNode.Builder(nodeIdGen.genId(), createSrcLoc(tagBegin, tagEnd)),
              cmdTextParts)
              .build(context);
      }
      try {
        AddParams(callNode)
        <CMD_CLOSE_DELCALL>
      } catch (ParseException e) {
        reportTemplateBodyErrorAndSkipTo(e, CMD_CLOSE_DELCALL);
      }
    )
  )
  { return callNode; }
}

JAVACODE
/**
 * Interprets the cmdTextParts to extract the phname attribute (if any) and then set it into the
 * builder.
 *
 * <p>TODO(lukes): switch calls to use 'structured' parsing.  It would simplify a lot of this and
 * yield better error messages
 */
private CallNode.Builder setCommandTextAndPlaceholderName(
    CallNode.Builder builder,
    List<String> cmdTextParts) {
  StringBuilder cmdTextSb = new StringBuilder();
  String phnameAttr = null;
  for (int i = 0; i < cmdTextParts.size(); i++) {
    String cmdTextPart = cmdTextParts.get(i);
    if (cmdTextPart.startsWith(" phname=\"") && cmdTextPart.endsWith("\"")) {
      if (phnameAttr != null) {
        errorReporter.report(
            builder.getSourceLocation(),
            MULTIPLE_PHNAME_ATTRIBUTES_IN_COMMAND,
            Joiner.on("").join(cmdTextParts));
      }
      phnameAttr = cmdTextPart;
    } else {
      cmdTextSb.append(cmdTextPart);
    }
  }

  // 9 == the length of ' phname="'... yes this is lame
  String userSuppliedPhName =
        (phnameAttr != null) ? phnameAttr.substring(9, phnameAttr.length() - 1) : null;
  return builder.commandText(cmdTextSb.toString()).userSuppliedPlaceholderName(userSuppliedPhName);
}


private void AddParams(CallNode callNode) :
{
  CallParamNode callParam;
}
{
  // consume all whitespace between {call}/{delcall} and the first {param} as well as between params
  SkipWhitespace()
  (
    callParam = CallParam()
    { callNode.addChild(callParam); }
    SkipWhitespace()
  )*
}


/**
 * CallParam -> <CMD_BEGIN_PARAM> CmdText() (<CMD_SELF_CLOSE>|<CMD_END> TemplateBlock() <CMD_CLOSE_PARAM>)
 */
private CallParamNode CallParam() :
{
  Token tagBegin, tagEnd;
  SourceItemInfo<String> cmdText;
  CallParamNode callParamNode = null;
}
{
  tagBegin = <CMD_BEGIN_PARAM>
  cmdText = CmdTextWithSource()
  {
    Checkpoint cmdTextCheckpoint = errorReporter.checkpoint();
    CallParamNode.CommandTextParseResult result =
        CallParamNode.parseCommandTextHelper(
            cmdText.parsedContent(),
            context,
            cmdText.srcLocation());
  }
  (
    tagEnd = <CMD_SELF_CLOSE>
    {
      callParamNode = new CallParamValueNode.Builder(
          nodeIdGen.genId(), result, createSrcLoc(tagBegin, tagEnd))
          .build(cmdTextCheckpoint, errorReporter);
    }
  |
    {
      pushState(TEMPLATE_DEFAULT);
      Checkpoint checkpoint = errorReporter.checkpoint();
    }
    tagEnd = <CMD_END>
    {
      CallParamContentNode cpcn = new CallParamContentNode.Builder(
          nodeIdGen.genId(), result, createSrcLoc(tagBegin, tagEnd))
          .build(cmdTextCheckpoint, errorReporter);
      List<StandaloneNode> templateBlock;
    }
    templateBlock = TemplateBlock()
    { cpcn.addChildren(templateBlock);
      callParamNode = cpcn;
    }
    {
      if (errorReporter.errorsSince(checkpoint) || getToken(1).kind != CMD_CLOSE_PARAM) {
        popStateIfStateIs(TEMPLATE_DEFAULT);
      } else {
        popState();
      }
    }
    <CMD_CLOSE_PARAM>
  )

  { return callParamNode; }
}


/**
 * LogStmt -> CmdOpenLog TemplateBlock CmdCloseLog
 */
private LogNode LogStmt() :
{
  Token open;
  List<StandaloneNode> templateBlock;
}
{
  open = <CMD_OPEN_LOG>
  { LogNode logNode = new LogNode(nodeIdGen.genId(), createSrcLoc(open)); }

  templateBlock = TemplateBlock()
  { logNode.addChildren(templateBlock); }

  <CMD_CLOSE_LOG>

  { return logNode; }
}


/**
 * DebuggerStmt -> CmdFullDebugger
 */
private DebuggerNode DebuggerStmt() :
{
  Token token;
}
{
  token = <CMD_FULL_DEBUGGER>
  { return new DebuggerNode(nodeIdGen.genId(), createSrcLoc(token)); }
}


// -------------------------------------------------------------------------------------------------
// Soy Expressions.



/**
 * Matches a comma-separated list of one or more expressions.
 *
 * ExprList -> Expr ( "," Expr )*
 */
private ImmutableList<ExprNode> ExprList() :
{
  ExprNode expr;
  ImmutableList.Builder<ExprNode> exprList = ImmutableList.builder();
}
{

  expr = Expr()
  { exprList.add(expr); }

  (
    <COMMA>
    expr = Expr()
    { exprList.add(expr); }
  )*

  { return exprList.build(); }
}


/**
 * Matches a full expression.
 *
 * Expr -> PrecExpr1
 */
private ExprNode Expr() :
{
  ExprNode expr;
}
{
  expr = PrecExpr1()
  { return expr; }
}


// For implementing operators with multiple precedence levels we implement the 'classic solution'
// as documented here: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#classic
//
// Previously we used the 'precedence climbing' algorithm described there which has the benefits
// of being shorter, but our implementation relied on semantic lookahead and was overly tied
// to the com.google.template.soy.exprtree.Operator enum which made it overly difficult to
// model things other than 'Operator's (like '.', '?.' and '['..']' operators).  Instead we
// 'hardcode' the precedence in the structure of the following calls.
//
// All of the rules below implement a simple rule that looks like:
// PrecExprN -> PrecExprN+1 ( OPERATOR_N PrecExprN+1 )*
//
// which covers all the left associative operators
//
// There are a few exceptions, namely the ternary and unary operators (which are right
// associative). In particular unary negation introduces some difficulty, because there is
// the potential for ambiguity (in the tokenizer only) with minus.  This is resolved by
// handling those cases separately.


/**
 * Matches expressions with precedence levels 1 and higher.
 *
 * This rule handles precedence level 1, which includes the binary null-coalescing operator "?:" and
 * the ternary conditional operator "? :".
 *
 * PrecExpr1 -> PrecExpr2 [ ( "?:" PrecExpr1 | "?" PrecExpr1 ":" PrecExpr1 ) ]
 */
private ExprNode PrecExpr1() :
{
  ExprNode expr1, expr2;
}
{
  { ExprNode expr; }

  expr = PrecExpr2()

  // These operators are right associative, the right recursion on PrecExpr1
  // accomplishes this
  [
    <QCOLON>
    expr1 = PrecExpr1()

    { expr = Operator.NULL_COALESCING.createNode(expr, expr1); }
  |
    <QMARK>
    expr1 = PrecExpr1()
    <COLON>
    expr2 = PrecExpr1()

    { expr = Operator.CONDITIONAL.createNode(expr, expr1, expr2); }
  ]

  { return expr; }
}


/**
 * Matches expressions with precedence levels 2 and higher.
 */
private ExprNode PrecExpr2() :
{
  ExprNode rightHand;
  Token op;
}
{
  { ExprNode expr; }

  expr = PrecExpr3()
  (
    op = <OR>
    rightHand = PrecExpr3()

    { expr = createOperatorNode(op.image, 2, expr, rightHand); }
  )*

  { return expr; }
}


/**
 * Matches expressions with precedence levels 3 and higher.
 */
private ExprNode PrecExpr3() :
{
  ExprNode rightHand;
  Token op;
}
{
  { ExprNode expr; }

  expr = PrecExpr4()
  (
    op = <AND>
    rightHand = PrecExpr4()

    { expr = createOperatorNode(op.image, 3, expr, rightHand); }
  )*

  { return expr; }
}


/**
 * Matches expressions with precedence levels 4 and higher.
 */
private ExprNode PrecExpr4() :
{
  ExprNode rightHand;
  Token op;
}
{
  { ExprNode expr; }

  expr = PrecExpr5()
  (
    (
      op = <EQ>
    |
      op = <NOT_EQ>
    )
    rightHand = PrecExpr5()

    { expr = createOperatorNode(op.image, 4, expr, rightHand); }
  )*

  { return expr; }
}


/**
 * Matches expressions with precedence levels 5 and higher.
 */
private ExprNode PrecExpr5() :
{
  ExprNode rightHand;
  Token op;
}
{
  { ExprNode expr; }

  expr = PrecExpr6()
  (
    (
      op = <LANGLE>
    |
      op = <RANGLE>
    |
      op = <LT_EQ>
    |
      op = <GT_EQ>
    )
    rightHand = PrecExpr6()

    { expr = createOperatorNode(op.image, 5, expr, rightHand); }
  )*

  { return expr; }
}


/**
 * Matches expressions with precedence levels 6 and higher.
 */
private ExprNode PrecExpr6() :
{
  ExprNode rightHand;
  Token op;
}
{
  { ExprNode expr; }

  expr = PrecExpr7()
  (
    (
      op = <PLUS>
    |
      op = <MINUS>
    )
    rightHand = PrecExpr7()

    { expr = createOperatorNode(op.image, 6, expr, rightHand); }
  )*

  { return expr; }
}


/**
 * Matches expressions with precedence levels 7 and higher.
 */
private ExprNode PrecExpr7() :
{
  ExprNode rightHand;
  Token op;
}
{
  { ExprNode expr; }

  expr = PrecExpr8()
  (
    (
      op = <TIMES>
    |
      op = <DIV>
    |
      op = <MOD>
    )
    rightHand = PrecExpr8()

    { expr = createOperatorNode(op.image, 7, expr, rightHand); }
  )*

  { return expr; }
}


/**
 * Matches expressions with precedence levels 8 and higher.
 *
 * <p>This level has our right associative unary operators '-' and 'not'
 */
private ExprNode PrecExpr8() :
{
  Token unaryOp;
}
{
  { ExprNode expr; }

  (
    expr = PrecExpr9()
  |
    (
      unaryOp = <NOT>
    |
      unaryOp = <MINUS>
    )
    expr = PrecExpr8()
    { expr = createOperatorNode(unaryOp.image, 8, expr); }
  )
  { return expr; }
}


/**
 * Matches expressions with precedence level 9.
 *
 * <p>This level has our data access 'operators' and is currently our highest precedence level.
 */
private ExprNode PrecExpr9() :
{
  ExprNode expr, keyExpr;
  Token ident, open, close, op;
}
{
  expr = Primary()
  (
    (
      op = <DOT>
    |
      op = <QDOT>
    )
    ident = <IDENT>
    { // TODO(lukes):  add the source location of the ident as a separate field.  This would be
      // more useful for error messages about the access
      expr =
          new FieldAccessNode(
              expr,
              ident.image,
              createSrcLoc(op, ident),
              op.kind == QDOT);
    }
  |
    (
      open = <LBRACKET>
    |
      open = <QLBRACKET>
    )
    keyExpr = Expr()
    close = <RBRACKET>
    { expr =
          new ItemAccessNode(
              expr,
              keyExpr,
              createSrcLoc(open, close),
              open.kind == QLBRACKET);
    }
  )*

  { return expr; }
}


/**
 * Primary -> "(" Expr ")" | IjRef | VarRef | GlobalOrFunction | CollectionLiteral | Primitive
 */
private ExprNode Primary() :
{
  ExprNode primary;
}
{
  (
    <LPAREN>
    primary = Expr()
    <RPAREN>
  |
    primary = IjRef()
  |
    primary = VarRef()
  |
    primary = GlobalOrFunction()
  |
    // This matches both map and list literals.  They have been 'left-factored' in to the same
    // production because they start with the same token.
    primary = CollectionLiteral()
  |
    primary = Primitive()
  )

  { return primary; }
}


/**
 * IjRef -> "$ij" "." Ident
 */
private VarRefNode IjRef() :
{
  Token ij;
  Token ident;
}
{
  ij = <IJ>
  try {
    <DOT>
    ident = <IDENT>
    { return new VarRefNode(ident.image, createSrcLoc(ij, ident), true, null); }
  } catch (ParseException e) {
    SourceLocation loc = createSrcLoc(ij);
    errorReporter.report(loc, INVALID_VAR_NAME_IJ);
    return new VarRefNode("ij", loc, false, null);
  }
}


/**
 * VarRef -> DollarIdent
 */
private VarRefNode VarRef() :
{
  Token ident;
}
{
  ident = <DOLLAR_IDENT>
  { return new VarRefNode(ident.image.substring(1), createSrcLoc(ident), false, null); }
}


/**
 * Parses a global, a function call, or a proto init call.
 * These share a production because they share a common prefix.
 *
 * GlobalOrFunction -> Identifier
 *                     [ "(" [ Expr ( ( "," Expr )* | ":" Expr ( "," Ident ":" Expr )* ) ] ")" ]
 */
private ExprNode GlobalOrFunction() :
{
  Identifier ident;
  Token openParen = null, closeParen = null, paramName;
  ExprNode first, expr;
  List<ExprNode> params = new ArrayList<ExprNode>();
  LinkedHashSet<String> paramNames;
}
{
  ident = Identifier()
  [
    openParen = <LPAREN>

    [
      // this can be any expr, for a function call; for proto init, must be a single-ident global
      first = Expr()

      (
        // parens contain a list of ident : expr pairs - this is a proto init call
        <COLON>
        expr = Expr()
        { if (!(first instanceof GlobalNode)
              || !BaseUtils.isIdentifier(((GlobalNode) first).getName())) {
            errorReporter.report(
                first.getSourceLocation(), INVALID_PARAM_NAME, first.toSourceString());
            first = GlobalNode.error(first.getSourceLocation());
          }

          paramNames = new LinkedHashSet<String>();

          paramNames.add(((GlobalNode) first).getName());
          params.add(expr);
        }

        (
          <COMMA>

          paramName = <IDENT>
          { if (!paramNames.add(paramName.image)) {
              errorReporter.report(createSrcLoc(paramName), DUPLICATE_PARAM_NAME, paramName.image);
            }
          }
          <COLON>
          expr = Expr()
          { params.add(expr); }
        )*

        closeParen = <RPAREN>
        { ProtoInitNode pNode = new ProtoInitNode(
              ident.identifier(), paramNames, ident.location().extend(createSrcLoc(closeParen)));
          pNode.addChildren(params);
          return pNode;
        }
      |
        // parens contain a list of exprs - this is a function
        { params.add(first); }

        (
          <COMMA>
          expr = Expr()
          { params.add(expr); }
        )*

        closeParen = <RPAREN>

        {
          FunctionNode fnNode =
              new FunctionNode(
                  ident.identifier(),
                  ident.location().extend(createSrcLoc(closeParen)));
          fnNode.addChildren(params);
          return fnNode;
        }
      )
    ]

    closeParen = <RPAREN>
  ]

  { // If we did not find parens, this is a global node
    if (openParen == null) {
      return new GlobalNode(ident.identifier(), ident.location());
    }

    // we found parens, but no param content. For exprs with no params, prefer functions.
    // TODO(user): Right now, the ambiguity is resolved in RewriteFunctionsPass, because
    // ExpressionParser doesn't have access to the type registry. Once ExprParser gets rolled into
    // SoyFileParser, get rid of RewriteFunctionsPass and do it in the parser.
    return new FunctionNode(ident.identifier(), ident.location().extend(createSrcLoc(closeParen)));
  }
}

/**
 * Parses map and list literals.  Both are primary expressions that start with "[".
 *
 * CollectionLiteral -> "[" ( "]" | ":" "]"
 *                      | Expr ( ( ("," Expr)* | ( ":" Expr ( "," Expr ":" Expr )* ) ) [","] "]" ) )
 */
private ExprNode CollectionLiteral() :
{
  Token begin, end;
  ExprNode itemExpr;
  List<ExprNode> items = ImmutableList.of();
}
{
  begin = <LBRACKET>
  (
    // empty map
    <COLON>
    end = <RBRACKET>
    { return new MapLiteralNode(items, createSrcLoc(begin, end)); }
  |
    // empty list
    end = <RBRACKET>
    { return new ListLiteralNode(items, createSrcLoc(begin, end)); }
  |
    // The first item of a non-empty list/map will be an expression
    itemExpr = MapKeyOrExpr()
    { items = new ArrayList<ExprNode>();
      items.add(itemExpr);
    }

    // The next item will be a comma for a list, or a colon for a map
    (
      ( // this lookahead is necessary to make this loop unambiguous with the trailing comma
        LOOKAHEAD({ getToken(1).kind == COMMA && getToken(2).kind != RBRACKET } )
        <COMMA>
        itemExpr = Expr()
        { items.add(itemExpr); }
      )*
      [ <COMMA> ]  // trailing comma
      end = <RBRACKET>
      { return new ListLiteralNode(items, createSrcLoc(begin, end)); }
    |
      // nonempty map
      <COLON>
      itemExpr = Expr()  // value
      { items.add(itemExpr); }
      (
        // this lookahead is necessary to make this loop unambiguous with the trailing comma
        LOOKAHEAD({ getToken(1).kind == COMMA && getToken(2).kind != RBRACKET } )
        <COMMA>
        itemExpr = MapKeyOrExpr()
        { items.add(itemExpr); }
        <COLON>
        itemExpr = Expr()
        { items.add(itemExpr); }
      )*
      [ <COMMA> ]  // trailing comma
      end = <RBRACKET>
      { return new MapLiteralNode(items, createSrcLoc(begin, end)); }
    )
  )
}

/**
 * Matches an expression that can be used as a map key, or a normal expression if it isn't for a
 * map key.
 */
private ExprNode MapKeyOrExpr() :
{
  ExprNode itemExpr;
  Token ident;
}
{
  ( LOOKAHEAD( <IDENT> <COLON> )
    ident = <IDENT>
    {
      // If it wasn't for the LOOKAHEAD this would have parsed as a global, just create one here
      // so we can keep parsing.
      itemExpr = new GlobalNode(ident.image, createSrcLoc(ident));
      // TODO(lukes): consider how important this check is.  The theory is that users might
      // think that our mapliterals work like keys in js object literals.  Though what will
      // really happen is that we will parse it as a global and then it just will get whatever
      // value is assigned (the risk is in the jssrc backend where undefined globals are
      // allowed).
      errorReporter.report(
          createSrcLoc(ident), SINGLE_IDENTIFIER_KEY_IN_MAP_LITERAL, ident.image);
    }
  |
    itemExpr = Expr()
  )

  { return itemExpr; }
}


/**
 * Primitive -> Null | Boolean | Integer | Float | String
 */
private PrimitiveNode Primitive() :
{
  Token tok;
  PrimitiveNode primitive;
}
{

  (
    tok = <NULL>
    { primitive = new NullNode(createSrcLoc(tok)); }
  |
    tok = <TRUE>
    { primitive = new BooleanNode(true, createSrcLoc(tok)); }
  |
    tok = <FALSE>
    { primitive = new BooleanNode(false, createSrcLoc(tok)); }
  |
    tok = <DEC_INTEGER>
    { SourceLocation loc = createSrcLoc(tok);
      Long parsed = Longs.tryParse(tok.image, 10);
      if (parsed == null || !IntegerNode.isInRange(parsed)) {
        errorReporter.report(loc, INTEGER_OUT_OF_RANGE);
        parsed = 0L;
      }
      primitive = new IntegerNode(parsed, loc);
    }
  |
    tok = <HEX_INTEGER>
    { SourceLocation loc = createSrcLoc(tok);
      Long parsed = Longs.tryParse(tok.image.substring(2), 16);
      if (parsed == null || !IntegerNode.isInRange(parsed)) {
        errorReporter.report(loc, INTEGER_OUT_OF_RANGE);
        parsed = 0L;
      }
      primitive = new IntegerNode(parsed, loc);
    }
  |
    tok = <FLOAT>
    { primitive = new FloatNode(Double.parseDouble(tok.image), createSrcLoc(tok)); }
  |
    tok = <STRING>
    { String strNoQuotes = tok.image.substring(1, tok.image.length() - 1);
      // TODO(lukes): a common strategy for string literals is to use a custom lexer state and a
      // MORE production.  Once the parsers are merged do that.
      primitive = new StringNode(UnescapeUtils.unescapeJs(strNoQuotes), createSrcLoc(tok));
    }
  )

  { return primitive; }
}


/**
 * A helper to parse a dotted identifier.
 *
 * Identifier -> Ident ( "." Ident )*
 */
private Identifier Identifier() :
{
  Token first, next = null;
  StringBuilder sb = null;  // lazily allocated
}
{
  first = <IDENT>
  // This is a no-op lookahead (it doesn't actually change the algorithm), but it suppresses a
  // choice conflict warning.  The issue is that global() followed by field access is ambiguous
  // with extending the global node.  By setting a LOOKAHEAD here, we are just saying 'prefer to
  // extend the identifier over a field access', which is what we want.
  ( LOOKAHEAD(1)
    <DOT>
    next = <IDENT>
    {
      if (sb == null) {
        sb = new StringBuilder();
        sb.append(first.image);
      }
      sb.append('.').append(next.image);
    }
  )*
  {
    return sb == null
      ? Identifier.create(first.image, createSrcLoc(first))
      : Identifier.create(sb.toString(), createSrcLoc(first, next));
  }
}




/**
 * A helper to parse identifiers as keywords.
 *
 * Keyword -> Ident
 */
private Token Keyword(String keyword) :
{
  Token ident;
}
{
  ident = <IDENT>
  {
    if (!ident.image.equals(keyword)) {
      throw generateParseException();
    }
    return ident;
  }
}


// -------------------------------------------------------------------------------------------------
// Type Expressions.
//
// The Soy type grammar is relatively simple.  We have 1 'operator' "|" for type unions, but other
// than that, it is just a small set of primary productions that are relatively unambiguous
//
// The most complex part of this is our handling of generic types since there is a small amount of
// ambiguity with nominal types because both start with a single identifier.  In the past this was
// handled by making our token definitions more complex, but this is generally antithetical to
// performance.
//
// NOTE: all the tokens we are consuming are defined in the TYPE_EXPR lexical state.


/**
 * TypeExpr -> Primary ( "|" Primary )*
 */
private TypeNode TypeExpr() :
{
  TypeNode first = null;
  TypeNode next = null;
  // lazily allocate the list since most of the time this isn't actually a Union
  List<TypeNode> members = null;
}
{
  first = PrimaryType()

  (
    <T_VBAR>
    next = PrimaryType()
    {
      if (members == null) {
        members = new ArrayList<TypeNode>();
        members.add(first);
      }
      members.add(next);
    }
  )*

  {
    return members == null ? first : UnionTypeNode.create(members);
  }
}


/**
 * Primary -> NamedType | UnknownType | RecordType
 */
private TypeNode PrimaryType() :
{
  TypeNode type;
}
{
  (
    type = NamedType()
  | type = UnknownType()
  | type = RecordType()
  )

  { return type; }
}


/**
 * RecordType -> "[" ( RecordField ( "," RecordField )* )? "]"
 */
private TypeNode RecordType() :
{
  List<RecordTypeNode.Property> properties = ImmutableList.of();
  Token open, close;
  RecordTypeNode.Property prop;
}
{
  open = <T_LBRACKET>

  (
    prop = RecordField()
    {
      properties = new ArrayList<RecordTypeNode.Property>();
      properties.add(prop);
    }
    (
      <T_COMMA>
      prop = RecordField()
      {
        properties.add(prop);
      }
    )*

  )?

  close = <T_RBRACKET>

  { return RecordTypeNode.create(createSrcLoc(open, close), properties); }
}


/**
 * RecordField -> T_NAME ":" TypeExpr
 */
private RecordTypeNode.Property RecordField() :
{
  Token fieldName;
  TypeNode fieldType;
}
{
  fieldName = <T_NAME>
  <T_COLON>
  fieldType = TypeExpr()

  {
    return RecordTypeNode.Property.create(createSrcLoc(fieldName), fieldName.image, fieldType);
  }
}


/**
 * NamedType -> T_NAME ( "." T_NAME )* [ "<" TypeExpr ( "," TypeExpr )* ">" ]
 *
 * <p>This includes any named type including our generic types
 */
private TypeNode NamedType() :
{
  Token first, open, close;
  Token next = null;
  String ident;
  SourceLocation fullLocation;

  TypeNode arg;
  List<TypeNode> genericArgs = ImmutableList.of();
  StringBuilder sb = null;
}
{

  first = <T_NAME>
  (
    <T_DOT>
    next = <T_NAME>
    {
      if (sb == null) {
        sb = new StringBuilder(first.image);
      }
      sb.append('.');
      sb.append(next.image);
    }
  )*
  {
    ident = sb == null ? first.image : sb.toString();
    fullLocation = next == null ? createSrcLoc(first) : createSrcLoc(first, next);
  }

  [
    open = <T_LANGLE>
    [
      arg = TypeExpr()
      {
        genericArgs = new ArrayList<TypeNode>();
        genericArgs.add(arg);
      }
      (
        <T_COMMA>
        arg = TypeExpr()
        {
          genericArgs.add(arg);
        }
      )*
    ]
    close = <T_RANGLE>
    {
      return GenericTypeNode.create(
          fullLocation.extend(createSrcLoc(close)),
          ident,
          genericArgs);
    }
  ]
  {
    return NamedTypeNode.create(fullLocation, ident);
  }
}


/**
 * UnknownType -> T_QMARK
 */
private TypeNode UnknownType() :
{
  Token tok;
}
{
  tok = <T_QMARK>
  { return NamedTypeNode.create(createSrcLoc(tok), "?"); }
}
